USE RESEARCH_DEV
GO


--	Development query for data extracts for SAMHSA ED-ALT (ED Opioid) grant reporting
-- under RITM0197988


DECLARE @START_DATE DATETIME
, @END_DATE DATETIME

SET @START_DATE = '01/01/2020'
SET @END_DATE = '01/01/2023'

SELECT * FROM CLARITY.dbo.IP_FLT_DATA WHERE TEMPLATE_ID = '754'

IF OBJECT_ID('TEMPDB..#ORT_SCORE_FLO_MEAS_ID', 'U') IS NOT NULL DROP TABLE #ORT_SCORE_FLO_MEAS_ID


SELECT FLO_MEAS_ID, COUNT(FLO_MEAS_ID) AS ROW_COUNT, MIN(RECORDED_TIME) AS MIN_RECORDED_TM, MAX(RECORDED_TIME) AS MAX_RECORDED_TM
INTO #ORT_SCORE_FLO_MEAS_ID
FROM CLARITY.dbo.IP_FLT_DATA FLT_DATA
INNER JOIN CLARITY.dbo.IP_FLWSHT_MEAS MEAS
	ON FLT_DATA.TEMPLATE_ID = MEAS.FLT_ID
WHERE 1 = 1
	AND FLT_DATA.TEMPLATE_ID = '754' -- Opioid Screening
GROUP BY FLO_MEAS_ID
ORDER BY FLO_MEAS_ID

CREATE INDEX FLO_MEAS_IDX ON #ORT_SCORE_FLO_MEAS_ID(FLO_MEAS_ID)

SELECT * FROM #ORT_SCORE_FLO_MEAS_ID ORDER BY FLO_MEAS_ID

IF OBJECT_ID ('dbo.SAMHSA_GRANT_REPORTING_ORT_SCORES', 'U') IS NOT NULL DROP TABLE dbo.SAMHSA_GRANT_REPORTING_ORT_SCORES

SELECT DISTINCT 
		P.PAT_ID
		, P.PAT_MRN_ID
		, E.PAT_ENC_CSN_ID
		, IPMEAS.FLO_MEAS_ID
		, GPDATA.FLO_MEAS_NAME
		, IPMEAS.RECORDED_TIME
		, IPMEAS.MEAS_VALUE
		, LOC_HX.ADT_DEPARTMENT_ID
		, LOC_HX.ADT_DEPARTMENT_NAME
INTO dbo.SAMHSA_GRANT_REPORTING_ORT_SCORES
FROM CLARITY.dbo.PATIENT P 
INNER JOIN CLARITY.dbo.PAT_ENC E ON P.PAT_ID = E.PAT_ID
INNER JOIN CLARITY.DBO.IP_FLWSHT_REC IPREC ON E.INPATIENT_DATA_ID = IPREC.INPATIENT_DATA_ID
INNER JOIN CLARITY.DBO.IP_FLWSHT_MEAS IPMEAS ON IPREC.FSD_ID = IPMEAS.FSD_ID 
INNER JOIN #ORT_SCORE_FLO_MEAS_ID ORT_FLO_ID ON IPMEAS.FLO_MEAS_ID = ORT_FLO_ID.FLO_MEAS_ID
LEFT JOIN CLARITY.dbo.IP_FLO_GP_DATA GPDATA ON IPMEAS.FLO_MEAS_ID = GPDATA.FLO_MEAS_ID
LEFT JOIN CLARITY.dbo.V_PAT_ADT_LOCATION_HX LOC_HX ON E.PAT_ENC_CSN_ID = LOC_HX.PAT_ENC_CSN 
	AND IPMEAS.RECORDED_TIME <= LOC_HX.OUT_DTTM AND IPMEAS.RECORDED_TIME > LOC_HX.IN_DTTM
WHERE 1 = 1
	--AND IPMEAS.FLO_MEAS_ID IN ('17934', '20916', '20917', '20918', '20919', '20920', '20921', '25822') 
	-- Score Total-M, Family History Substance Abuse - Male, Personal History Substance Abuse, Age, Preadolescent Sexual Abuse, Psychological Disease, Total Score Risk, OPIOID RISK LEVEL, 
	--AND IPMEAS.FLT_ID = '754' -- Opioid Screening
	--AND E.ENC_TYPE_C <> '51' -- Surgery
ORDER BY P.PAT_MRN_ID, E.PAT_ENC_CSN_ID, IPMEAS.FLO_MEAS_ID, IPMEAS.RECORDED_TIME



-- Listing encounters with an ED event ID

IF OBJECT_ID('TEMPDB..#ED_EVENT_ID', 'U') IS NOT NULL DROP TABLE #ED_EVENT_ID

SELECT IEP.PAT_ENC_CSN_ID
	,IEV.EVENT_TIME as ED_ARRIVAL_DTTM
INTO #ED_EVENT_ID
FROM CLARITY.dbo.ED_IEV_PAT_INFO as IEP
INNER JOIN CLARITY.dbo.ED_IEV_EVENT_INFO as IEV
ON IEP.EVENT_ID = IEV.EVENT_ID
WHERE IEV.EVENT_TYPE = '1605031' 
AND IEV.EVENT_TIME >= @START_DATE
AND IEV.EVENT_TIME < @END_DATE


-- Identifying patients using the pain related ICD code listing from ED data analysts,
-- where the Pain Type is not Chronic

IF (OBJECT_ID('tempdb..#PAIN_DX_IDS') IS NOT NULL)
DROP TABLE #PAIN_DX_IDS

SELECT *
INTO #PAIN_DX_IDS
FROM
(
SELECT DX_ID
	,DX_CODE
	,DX_NAME
	,IS_CHEST_PAIN
	,IS_ABDOMINAL_PAIN	
	,IS_JOINT_PAIN	
	,IS_BACK_PAIN	
	,IS_LEG_PAIN	
	,IS_NECK_PAIN	
	,IS_CHRONIC_PAIN
	,COALESCE(
	CASE WHEN IS_CHEST_PAIN = 1 THEN 'CHEST' ELSE NULL END
	,CASE WHEN IS_ABDOMINAL_PAIN = 1 THEN 'ABDOMINAL' ELSE NULL END
	,CASE WHEN IS_JOINT_PAIN = 1 THEN 'JOINT' ELSE NULL END
	,CASE WHEN IS_BACK_PAIN = 1 THEN 'BACK' ELSE NULL END
	,CASE WHEN IS_LEG_PAIN = 1 THEN 'LEG' ELSE NULL END
	,CASE WHEN IS_NECK_PAIN = 1 THEN 'NECK' ELSE NULL END
	,CASE WHEN IS_CHRONIC_PAIN = 1 THEN 'CHRONIC' ELSE NULL END
	,'OTHER') as PAIN_TYPE
FROM (
		SELECT EDG.DX_ID
			,EDG.DX_NAME
			,EDG.CURRENT_ICD10_LIST as DX_CODE
			,MAX(CASE WHEN GI.GROUPER_NAME LIKE '%CHEST%' THEN 1 ELSE 0 END) as IS_CHEST_PAIN
			,MAX(CASE WHEN GI.GROUPER_NAME LIKE '%ABDOM%' THEN 1 ELSE 0 END) as IS_ABDOMINAL_PAIN
			,MAX(CASE WHEN (GI.GROUPER_NAME LIKE '%JOINT%' OR GI.GROUPER_NAME LIKE '%ELBOW%' OR GI.GROUPER_NAME LIKE '%WRIST%') THEN 1 ELSE 0 END) as IS_JOINT_PAIN
			,MAX(CASE WHEN GI.GROUPER_NAME LIKE '%BACK%'  THEN 1 ELSE 0 END) as IS_BACK_PAIN
			,MAX(CASE WHEN (GI.GROUPER_NAME LIKE '%KNEE%' OR GI.GROUPER_NAME LIKE '%ANKLE%' OR GI.GROUPER_NAME LIKE '%SCIATICA%') THEN 1 ELSE 0 END) as IS_LEG_PAIN
			,MAX(CASE WHEN GI.GROUPER_NAME LIKE '%NECK%' THEN 1 ELSE 0 END) as IS_NECK_PAIN
			,MAX(CASE WHEN (GI.GROUPER_NAME LIKE '%ONC%' OR GI.GROUPER_NAME LIKE '%CHRONIC%' OR GI.GROUPER_NAME LIKE '%CANCER%') THEN 1 ELSE 0 END) as IS_CHRONIC_PAIN
		FROM CLARITY.dbo.CLARITY_EDG as EDG
		INNER JOIN CLARITY.dbo.GROUPER_COMPILED_REC_LIST as VCG
		ON EDG.DX_ID = VCG.GROUPER_RECORDS_NUMERIC_ID
		INNER JOIN CLARITY.dbo.GROUPER_ITEMS as GI
		ON VCG.BASE_GROUPER_ID = GI.GROUPER_ID
		WHERE 1 = 1 
			AND (
					VCG.COMPILED_CONTEXT = 'EDG' --dx records
					AND GI.CONTEXT_INI = 'EDG' --dx records
					AND GI.GROUPER_NAME LIKE '%PAIN%' --pain grouper
					AND GROUPER_NAME NOT LIKE '%EXCL%' --not an exclusion grouper
				)
			--OR LEFT(EDG.CURRENT_ICD10_LIST,1) = 'S'
			GROUP BY EDG.DX_ID
			,EDG.DX_NAME
			,EDG.CURRENT_ICD10_LIST
		) as PAIN
) AS TEMP
WHERE PAIN_TYPE != 'CHRONIC'
ORDER BY DX_ID


INSERT INTO #PAIN_DX_IDS
(
	DX_ID
	, DX_NAME
	, DX_CODE
)
SELECT DX_ID
	, DX_NAME
	, CURRENT_ICD10_LIST
FROM CLARITY.dbo.CLARITY_EDG
WHERE 1 = 1
	AND LEFT(CURRENT_ICD10_LIST,1) = 'S'
	AND DX_ID NOT IN (SELECT DX_ID FROM #PAIN_DX_IDS)

CREATE INDEX DX_IDX ON #PAIN_DX_IDS(DX_ID)


-- Reference encounter list, ED visits

IF OBJECT_ID('TEMPDB..#PAIN_ENC_LIST_STAGING', 'U') IS NOT NULL DROP TABLE #PAIN_ENC_LIST_STAGING

SELECT ENC.PAT_ENC_CSN_ID
			, ENC.PAT_ID
			, DEP.DEPARTMENT_NAME
INTO #PAIN_ENC_LIST_STAGING
FROM #ED_EVENT_ID ED
INNER JOIN CLARITY.dbo.PAT_ENC ENC
	ON ED.PAT_ENC_CSN_ID = ENC.PAT_ENC_CSN_ID
INNER JOIN CLARITY.dbo.PAT_ENC_HSP HSP
	ON ENC.PAT_ENC_CSN_ID = HSP.PAT_ENC_CSN_ID
INNER JOIN CLARITY.dbo.PAT_ENC_DX PEDX
	ON ENC.PAT_ENC_CSN_ID = PEDX.PAT_ENC_CSN_ID
INNER JOIN #PAIN_DX_IDS PAIN
	ON PEDX.DX_ID = PAIN.DX_ID
--INNER JOIN dbo.SAMHSA_DX_LIST_G_CROSS DXL
--	ON PEDX.DX_ID = DXL.DX_ID
LEFT JOIN CLARITY.dbo.CLARITY_DEP DEP
	ON ISNULL(ENC.DEPARTMENT_ID,ENC.EFFECTIVE_DEPT_ID) = DEP.DEPARTMENT_ID
WHERE 1 = 1
GROUP BY ENC.PAT_ENC_CSN_ID
			, ENC.PAT_ID
			, DEP.DEPARTMENT_NAME


-- Listing unique patients and the index encounter date and CDR (because CSNs are occasionally out of sequence)

IF OBJECT_ID('TEMPDB..#PAT_LIST', 'U') IS NOT NULL DROP TABLE #PAT_LIST

SELECT ENC.PAT_ID
		, MIN(ENC.CONTACT_DATE) AS FIRST_ENC_DT
		, MIN(ENC.PAT_ENC_DATE_REAL) AS FIRST_ENC_CDR
INTO #PAT_LIST
FROM #PAIN_ENC_LIST_STAGING EST
INNER JOIN CLARITY.dbo.PAT_ENC ENC
	ON EST.PAT_ENC_CSN_ID = ENC.PAT_ENC_CSN_ID
INNER JOIN CLARITY.dbo.PATIENT PAT
	ON ENC.PAT_ID = PAT.PAT_ID
WHERE 1 = 1
	AND ENC.CONTACT_DATE >= @START_DATE
GROUP BY ENC.PAT_ID
ORDER BY ENC.PAT_ID


-- Writing extract table for patients

IF OBJECT_ID ('dbo.SAMHSA_GRANT_REPORTING_PATIENTS', 'U') IS NOT NULL DROP TABLE dbo.SAMHSA_GRANT_REPORTING_PATIENTS

SELECT PL.PAT_ID
		, P.PAT_MRN_ID
		, P.BIRTH_DATE
		, SEX.NAME AS PAT_SEX
		, CAST( 
		(SELECT DISTINCT RACE.TITLE + '; '
			FROM 
				CLARITY.DBO.PATIENT_RACE PR
				INNER JOIN CLARITY.DBO.ZC_PATIENT_RACE RACE ON RACE.PATIENT_RACE_C =PR.PATIENT_RACE_C --Race
			WHERE
				PR.PAT_ID = P.PAT_ID
			FOR XML PATH ('')
			)  AS VARCHAR(500))AS PATIENT_RACE
		, EG.NAME AS ETHNIC_GROUP_NM
		, PL.FIRST_ENC_DT
		, PL.FIRST_ENC_CDR
		, MS.NAME AS MARITAL_STATUS_NM
		--, R.NAME AS RELIGION_NM
		, L.NAME AS LANGUAGE_NM
		--, P4.LANGUAGE_C_CMT
		, P.INTRPTR_NEEDED_YN
		, CT.NAME AS CITIZENSHIP_NM
		, P.ZIP
		, P.TMP_ZIP
INTO dbo.SAMHSA_GRANT_REPORTING_PATIENTS
FROM #PAT_LIST PL
INNER JOIN CLARITY.dbo.PATIENT P
	ON PL.PAT_ID = P.PAT_ID
INNER JOIN CLARITY.dbo.PATIENT_2 P2
	ON PL.PAT_ID = P2.PAT_ID
INNER JOIN CLARITY.dbo.PATIENT_3 P3
	ON PL.PAT_ID = P3.PAT_ID
INNER JOIN CLARITY.dbo.PATIENT_4 P4
	ON PL.PAT_ID = P4.PAT_ID
LEFT JOIN CLARITY.dbo.ZC_SEX SEX
	ON P.SEX_C = SEX.RCPT_MEM_SEX_C
LEFT JOIN CLARITY.dbo.ZC_ETHNIC_GROUP EG
	ON P.ETHNIC_GROUP_C = EG.ETHNIC_GROUP_C
LEFT JOIN CLARITY.dbo.ZC_MARITAL_STATUS MS
	ON P.MARITAL_STATUS_C = MS.MARITAL_STATUS_C
LEFT JOIN CLARITY.dbo.ZC_RELIGION R
	ON P.RELIGION_C = R.RELIGION_C
LEFT JOIN CLARITY.dbo.ZC_LANGUAGE L
	ON P.LANGUAGE_C = L.LANGUAGE_C
LEFT JOIN CLARITY.dbo.ZC_CITIZENSHIP CT
	ON P2.CITIZENSHIP_C = CT.CITIZENSHIP_C
WHERE 1 = 1
	--AND PL.PAT_ID = 'Z2092158'


-- Encounter level data

-- Staging table

IF OBJECT_ID('TEMPDB..#SAMHSA_ENC_STAGING', 'U') IS NOT NULL DROP TABLE #SAMHSA_ENC_STAGING

SELECT DISTINCT SAMHSA_PAT.PAT_ID
		, E.HSP_ACCOUNT_ID
		, E.PAT_ENC_CSN_ID
		, E.CONTACT_DATE
		, E.PAT_ENC_DATE_REAL
		, H.ADT_PAT_CLASS_C
		, PC.NAME AS ADT_PAT_CLASS_NM
		, E.ENC_TYPE_C
		, ET.NAME AS ENC_TYPE_NM
		, H.ADT_PATIENT_STAT_C
		, PS.NAME AS PATIENT_STAT_NM
		, H.ACUITY_LEVEL_C
		, AL.NAME AS ACUITY_LEVEL_NM
		, LOC.NAME AS LEVEL_OF_CARE_NM
		, E.APPT_PRC_ID
		, PRC.PRC_NAME AS APPT_PRC_NM
		, COALESCE(E.DEPARTMENT_ID,E.EFFECTIVE_DEPT_ID) AS DEPARTMENT_ID
		, COALESCE(D.DEPARTMENT_NAME, D2.DEPARTMENT_NAME) AS DEPARTMENT_NAME
		, H.ADT_ARRIVAL_TIME
		, H.MEANS_OF_ARRV_C
		, E.VISIT_PROV_ID
		, E.PCP_PROV_ID
		, E.PRIMARY_LOC_ID
		, L.LOC_NAME AS PRIMARY_LOC_NM
		, H.ADMISSION_PROV_ID
		, H.BILL_ATTEND_PROV_ID
		, H2.HSPTL_ATTND_PROV_ID
		, H.FOLLOWUP_PROV_ID
		, E.APPT_TIME
		, E.APPT_LENGTH
		, AST.NAME AS APPT_STATUS_NM
		, CR.NAME AS CANCEL_REASON_NM
		, E.CANCEL_REASON_CMT
		, H.HOSP_ADMSN_TIME
		, H.INP_ADM_DATE
		, H.OP_ADM_DATE
		, H.EMER_ADM_DATE
		, H.ADMIT_SOURCE_C
		, ADM.NAME AS ADMIT_SOURCE_NM
		, H.HOSP_ADMSN_TYPE_C
		, ADMT.NAME AS HOSP_ADMSN_TYPE_NM
		, H.ADMIT_CONF_STAT_C
		, CS.NAME AS ADMIT_CONF_STAT_NM
		, H.HOSP_SERV_C
		, ZCPS.NAME AS HOSP_SERV_NM
		, H.HOSP_DISCH_TIME
		, EAP.PROC_CODE AS LOS_PRIME_PROC_CD
		, EAP.PROC_NAME AS LOS_PRIME_PROC_NM
		, H.DISCH_CONF_STAT_C
		, ZCCS.NAME AS DISCH_CONF_STAT_NM
		, H.DISCH_DISP_C
		, DD.NAME AS DISCH_DISP_NM
		, H.DISCH_DEST_C
		, DST.NAME AS DISCH_DEST_NM
		, HA.PRIMARY_PLAN_ID
		, ACT_CVG.PLAN_ID AS PRIM_EPP_ID
		, E.COVERAGE_ID
INTO #SAMHSA_ENC_STAGING
FROM dbo.SAMHSA_GRANT_REPORTING_PATIENTS SAMHSA_PAT
INNER JOIN CLARITY.dbo.PAT_ENC E
	ON SAMHSA_PAT.PAT_ID = E.PAT_ID
LEFT JOIN CLARITY.dbo.PAT_ENC_HSP H
	ON E.PAT_ENC_CSN_ID = H.PAT_ENC_CSN_ID
LEFT JOIN CLARITY.dbo.PAT_ENC_HSP_2 H2
	ON E.PAT_ENC_CSN_ID = H2.PAT_ENC_CSN_ID
LEFT JOIN CLARITY.dbo.ZC_PAT_CLASS PC
	ON H.ADT_PAT_CLASS_C = PC.ADT_PAT_CLASS_C
LEFT JOIN CLARITY.dbo.ZC_DISP_ENC_TYPE ET
	ON E.ENC_TYPE_C = ET.DISP_ENC_TYPE_C
LEFT JOIN CLARITY.dbo.ZC_PAT_STATUS PS
	ON H.ADT_PATIENT_STAT_C = PS.ADT_PATIENT_STAT_C
LEFT JOIN CLARITY.dbo.ZC_ACUITY_LEVEL AL
	ON H.ACUITY_LEVEL_C = AL.ACUITY_LEVEL_C
LEFT JOIN CLARITY.dbo.CLARITY_PRC PRC
	ON E.APPT_PRC_ID = PRC.PRC_ID
LEFT JOIN CLARITY.dbo.CLARITY_DEP D
	ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
LEFT JOIN CLARITY.dbo.CLARITY_DEP D2
	ON E.EFFECTIVE_DEPT_ID = D2.DEPARTMENT_ID
LEFT JOIN CLARITY.dbo.ZC_ARRIV_MEANS ARVM
	ON H.MEANS_OF_ARRV_C= ARVM.MEANS_OF_ARRV_C
LEFT JOIN CLARITY.dbo.CLARITY_LOC L
	ON E.PRIMARY_LOC_ID = L.LOC_ID
LEFT JOIN CLARITY.dbo.ZC_APPT_STATUS AST
	ON E.APPT_STATUS_C = AST.APPT_STATUS_C
LEFT JOIN CLARITY.dbo.ZC_ADM_SOURCE ADM
	ON H.ADMIT_SOURCE_C = ADM.ADMIT_SOURCE_C
LEFT JOIN CLARITY.dbo.ZC_HOSP_ADMSN_TYPE ADMT
	ON H.HOSP_ADMSN_TYPE_C = ADMT.HOSP_ADMSN_TYPE_C
LEFT JOIN CLARITY.dbo.ZC_CONF_STAT CS
	ON H.ADMIT_CONF_STAT_C = CS.ADMIT_CONF_STAT_C
LEFT JOIN CLARITY.dbo.ZC_PAT_SERVICE ZCPS
	ON H.HOSP_SERV_C = ZCPS.HOSP_SERV_C
LEFT JOIN CLARITY.dbo.ZC_CONF_STAT ZCCS
	ON H.DISCH_CONF_STAT_C = ZCCS.ADMIT_CONF_STAT_C
LEFT JOIN CLARITY.dbo.ZC_DISCH_DISP DD
	ON H.DISCH_DISP_C = DD.DISCH_DISP_C
LEFT JOIN CLARITY.dbo.ZC_DISCH_DEST DST
	ON H.DISCH_DEST_C = DST.DISCH_DEST_C
LEFT JOIN CLARITY.dbo.ZC_LVL_OF_CARE LOC
	ON H.LEVEL_OF_CARE_C = LOC.LEVEL_OF_CARE_C
LEFT JOIN CLARITY.dbo.PAT_ENC_APPT PE_APT
	ON E.PAT_ENC_CSN_ID = PE_APT.PAT_ENC_CSN_ID
LEFT JOIN CLARITY.dbo.ZC_CANCEL_REASON CR
	ON E.CANCEL_REASON_C = CR.CANCEL_REASON_C
LEFT JOIN CLARITY.dbo.CLARITY_EAP EAP
	ON E.LOS_PRIME_PROC_ID = EAP.PROC_ID
LEFT JOIN CLARITY.dbo.HSP_ACCOUNT HA
	ON E.HSP_ACCOUNT_ID = HA.HSP_ACCOUNT_ID
LEFT JOIN CLARITY.dbo.PAT_ACCT_CVG ACT_CVG 
	ON E.PAT_ID = ACT_CVG.PAT_ID
		AND ACT_CVG.LINE = 1
		AND ACT_CVG.ACCOUNT_ACTIVE_YN = 'Y'
WHERE 1 = 1
	AND E.PAT_ENC_DATE_REAL >= SAMHSA_PAT.FIRST_ENC_CDR
ORDER BY E.PAT_ENC_CSN_ID

CREATE INDEX PAT_ENC_CSN_ID ON #SAMHSA_ENC_STAGING (PAT_ENC_CSN_ID)


IF OBJECT_ID('TEMPDB..#ENC_CPP', 'U') IS NOT NULL DROP TABLE #ENC_CPP

SELECT DISTINCT
		SAMHSA_ENC.PAT_ENC_CSN_ID
		, CPP.COVERAGE_ID
		, COALESCE(SAMHSA_ENC.PRIMARY_PLAN_ID,CPP.BENEFIT_PLAN_ID, SAMHSA_ENC.PRIM_EPP_ID) AS BENEFIT_PLAN_ID
		, CPP.PAYOR_ID AS VISIT_EPM_ID
		, CPP.BENEFIT_PLAN_ID AS VISIT_EPP_ID
		, CPP.FIN_CLASS_C AS VISIT_FC
INTO #ENC_CPP
FROM CLARITY.dbo.V_COVERAGE_PAYOR_PLAN CPP
INNER JOIN #SAMHSA_ENC_STAGING SAMHSA_ENC
	ON CPP.COVERAGE_ID = SAMHSA_ENC.COVERAGE_ID
	AND SAMHSA_ENC.CONTACT_DATE <= CPP.TERM_DATE
	AND SAMHSA_ENC.CONTACT_DATE >= CPP.EFF_DATE


-- Creating final #ENC_LIST

IF OBJECT_ID('TEMPDB..#SAMHSA_ENC_STAGING_2', 'U') IS NOT NULL DROP TABLE #SAMHSA_ENC_STAGING_2

SELECT SAMHSA.*
		, ECPP.BENEFIT_PLAN_ID
		, ECPP.VISIT_EPM_ID
		, ECPP.VISIT_EPP_ID
		, ECPP.VISIT_FC
INTO #SAMHSA_ENC_STAGING_2
FROM #SAMHSA_ENC_STAGING SAMHSA
LEFT JOIN #ENC_CPP ECPP
	ON SAMHSA.PAT_ENC_CSN_ID = ECPP.PAT_ENC_CSN_ID


--Payor Plan Financial Class

IF OBJECT_ID('TEMPDB..#PAYOR_PLAN_FC_ID', 'U') IS NOT NULL DROP TABLE #PAYOR_PLAN_FC_ID

SELECT DISTINCT
	ALL_ENC.PAT_ENC_CSN_ID
	, COALESCE(HA.PRIMARY_PAYOR_ID, ALL_ENC.VISIT_EPM_ID,--PAT.PRIM_EPM_ID) 
				ACT_CVG.PAYOR_ID) AS PAYOR_ID
	, COALESCE(HA.PRIMARY_PLAN_ID, ALL_ENC.VISIT_EPP_ID, ALL_ENC.PRIM_EPP_ID) AS BENEFIT_PLAN_ID
	, COALESCE(HA.ACCT_FIN_CLASS_C, ALL_ENC.VISIT_FC,  --PAT.PRIM_FC
				ACT_CVG.FIN_CLASS) AS FINANCIAL_CLASS
INTO #PAYOR_PLAN_FC_ID
FROM #SAMHSA_ENC_STAGING_2 ALL_ENC
INNER JOIN CLARITY.DBO.PATIENT PAT ON ALL_ENC.PAT_ID = PAT.PAT_ID
LEFT JOIN CLARITY.dbo.PAT_ACCT_CVG ACT_CVG
	ON PAT.PAT_ID = ACT_CVG.PAT_ID
		AND ACT_CVG.LINE = 1
		AND ACT_CVG.ACCOUNT_ACTIVE_YN = 'Y'
LEFT OUTER JOIN CLARITY.DBO.HSP_ACCOUNT HA ON ALL_ENC.HSP_ACCOUNT_ID = HA.HSP_ACCOUNT_ID


IF OBJECT_ID('TEMPDB..#PAYOR_PLAN_FC', 'U') IS NOT NULL DROP TABLE #PAYOR_PLAN_FC

SELECT DISTINCT
	PPF.PAT_ENC_CSN_ID
	, PPF.PAYOR_ID
	, EPM.PAYOR_NAME
	, PPF.BENEFIT_PLAN_ID
	, EPP.BENEFIT_PLAN_NAME
	, PPF.FINANCIAL_CLASS
	, FC.FINANCIAL_CLASS_NAME
	, EPP2.PROD_TYPE_C AS PROD_TYPE_C
	, ZPT.NAME AS PRODUCT_TYPE
INTO
	#PAYOR_PLAN_FC
FROM
	#PAYOR_PLAN_FC_ID PPF
	LEFT OUTER JOIN CLARITY.DBO.CLARITY_EPM EPM ON PPF.PAYOR_ID = EPM.PAYOR_ID
	LEFT OUTER JOIN CLARITY.DBO.CLARITY_EPP EPP ON PPF.BENEFIT_PLAN_ID = EPP.BENEFIT_PLAN_ID
	LEFT OUTER JOIN CLARITY.DBO.CLARITY_FC FC ON PPF.FINANCIAL_CLASS  = FC.FINANCIAL_CLASS
	LEFT OUTER JOIN CLARITY.DBO.CLARITY_EPP_2 EPP2 ON PPF.BENEFIT_PLAN_ID = EPP2.BENEFIT_PLAN_ID
	LEFT OUTER JOIN CLARITY.DBO.ZC_PROD_TYPE ZPT ON EPP2.PROD_TYPE_C = ZPT.PROD_TYPE_C
;


-- Listing then concatenating reasons for visit

IF OBJECT_ID('TEMPDB..#RSN_FOR_VISIT', 'U') IS NOT NULL DROP TABLE #RSN_FOR_VISIT

SELECT SAMHSA.PAT_ENC_CSN_ID
		, RSN.LINE
		, CLRSN.REASON_VISIT_NAME
		--, CLRSN.ABBREVIATION
		, RSN.ENC_REASON_OTHER
INTO #RSN_FOR_VISIT
FROM #SAMHSA_ENC_STAGING_2 SAMHSA
INNER JOIN CLARITY.dbo.PAT_ENC_RSN_VISIT RSN
	ON SAMHSA.PAT_ENC_CSN_ID = RSN.PAT_ENC_CSN_ID
LEFT JOIN CLARITY.dbo.CL_RSN_FOR_VISIT CLRSN
	ON RSN.ENC_REASON_ID = CLRSN.REASON_VISIT_ID
ORDER BY SAMHSA.PAT_ENC_CSN_ID
		, RSN.LINE


IF OBJECT_ID('TEMPDB..#RSN_FOR_VISIT_STUFF', 'U') IS NOT NULL DROP TABLE #RSN_FOR_VISIT_STUFF

SELECT DISTINCT 
	PAT_ENC_CSN_ID
	, RSN_FOR_VISIT_LIST = STUFF((
		SELECT DISTINCT '|' + RSN.REASON_VISIT_NAME 
		FROM #RSN_FOR_VISIT RSN WHERE RSN.PAT_ENC_CSN_ID = REASON.PAT_ENC_CSN_ID
		FOR XML PATH('')
		),1,1,'')
	, OTHER_RSN_LIST = STUFF((
		SELECT DISTINCT '|' + RSN.ENC_REASON_OTHER
		FROM #RSN_FOR_VISIT RSN WHERE RSN.PAT_ENC_CSN_ID = REASON.PAT_ENC_CSN_ID
		FOR XML PATH('')
		),1,1,'')
INTO 
	#RSN_FOR_VISIT_STUFF
FROM 
	#RSN_FOR_VISIT REASON
GROUP BY 
	REASON.PAT_ENC_CSN_ID
ORDER BY PAT_ENC_CSN_ID;


-- Base Patient Class, from ADT table, filtering NULL Base Patient Class codes
-- Some encounters have multiple Base Patient Classes, Matt Cvitanovich asked
-- to have just the first one.

IF OBJECT_ID('TEMPDB..#BASE_PAT_CLASS', 'U') IS NOT NULL DROP TABLE #BASE_PAT_CLASS

SELECT *
INTO #BASE_PAT_CLASS
FROM
(
SELECT ADT.PAT_ENC_CSN_ID
		, ADT.EVENT_ID
		, RANK() OVER (PARTITION BY ADT.PAT_ENC_CSN_ID ORDER BY ADT.EVENT_ID ASC) AS EVENT_NUM
		, ADT.BASE_PAT_CLASS_C
		, BSCL.NAME AS BASE_PAT_CLASS_NM
FROM CLARITY.dbo.CLARITY_ADT ADT
INNER JOIN #SAMHSA_ENC_STAGING_2 SAMHSA
	ON ADT.PAT_ENC_CSN_ID = SAMHSA.PAT_ENC_CSN_ID
LEFT JOIN CLARITY.dbo.ZC_ACCT_BASECLS_HA BSCL
	ON ADT.BASE_PAT_CLASS_C = BSCL.ACCT_BASECLS_HA_C
WHERE 1 = 1
	AND ADT.BASE_PAT_CLASS_C IS NOT NULL
) AS TEMP
WHERE EVENT_NUM = 1


-- Listing PHQ-9 question responses and total score. Question numbering refers to the sequence of questions
-- on the PHQ-9 documentation.

IF OBJECT_ID('TEMPDB..#PHQ9_QUESTIONS_TOTAL_SCORE_STAGING', 'U') IS NOT NULL DROP TABLE #PHQ9_QUESTIONS_TOTAL_SCORE_STAGING

SELECT DISTINCT
	E.PAT_ID
	, E.PAT_ENC_CSN_ID
	, P.PAT_MRN_ID
	, IP_FLWSHT_REC.FSD_ID
	, GP.FLO_MEAS_NAME
	, IP_FLWSHT_MEAS.FLO_MEAS_ID
	, CASE WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '20864' THEN 1 -- Question 1 from questionnaire
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '20865' THEN 2
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '20866' THEN 3
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '20869' THEN 4
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '20871' THEN 10 -- total score numeric
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '20872' THEN 5
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '20874' THEN 6
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '20876' THEN 7
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '20878' THEN 8
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '20880' THEN 9
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '21001' THEN 11 -- total score category
			END AS PHQ9_QSTN_ORDER
	, IP_FLWSHT_MEAS.MEAS_VALUE
	, IP_FLWSHT_MEAS.LINE
	, IP_FLWSHT_MEAS.ENTRY_TIME
INTO #PHQ9_QUESTIONS_TOTAL_SCORE_STAGING
FROM CLARITY.dbo.PAT_ENC E
	INNER JOIN #SAMHSA_ENC_STAGING_2 SAMHSA ON E.PAT_ENC_CSN_ID = SAMHSA.PAT_ENC_CSN_ID		
	INNER JOIN CLARITY.dbo.PATIENT P ON P.PAT_ID= E.PAT_ID
	INNER JOIN CLARITY.dbo.CLARITY_SER CS ON CS.PROV_ID= E.VISIT_PROV_ID
	LEFT JOIN CLARITY.dbo.IP_DATA_STORE IPDS ON IPDS.EPT_CSN=E.PAT_ENC_CSN_ID
	LEFT JOIN CLARITY.dbo.IP_FLWSHT_REC on IP_FLWSHT_REC.INPATIENT_DATA_ID=IPDS.INPATIENT_DATA_ID
	LEFT JOIN CLARITY.dbo.IP_FLWSHT_MEAS on IP_FLWSHT_MEAS.FSD_ID=IP_FLWSHT_REC.FSD_ID 
	LEFT JOIN CLARITY.dbo.IP_FLO_GP_DATA GP ON IP_FLWSHT_MEAS.FLO_MEAS_ID = GP.FLO_MEAS_ID
WHERE 1 = 1
	AND IP_FLWSHT_MEAS.FLO_MEAS_ID IN (
										'20865'
										,'20866'
										,'20869'
										,'20872'
										,'20874'
										,'20876'
										,'20878'
										,'20880'	
										,'21001'
										,'20864'
										,'20871'
									   )
ORDER BY E.PAT_ID, E.PAT_ENC_CSN_ID, IP_FLWSHT_REC.FSD_ID, IP_FLWSHT_MEAS.FLO_MEAS_ID, IP_FLWSHT_MEAS.LINE


IF OBJECT_ID('TEMPDB..#PHQ9_QUESTIONS_TOTAL_SCORE', 'U') IS NOT NULL DROP TABLE #PHQ9_QUESTIONS_TOTAL_SCORE

SELECT *
INTO #PHQ9_QUESTIONS_TOTAL_SCORE
FROM
(
SELECT 
	PAT_ID
	, PAT_ENC_CSN_ID
	, PAT_MRN_ID
	, FSD_ID
	, FLO_MEAS_NAME
	, FLO_MEAS_ID
	, PHQ9_QSTN_ORDER
	, MEAS_VALUE
	, RANK() OVER (PARTITION BY PAT_ENC_CSN_ID,PHQ9_QSTN_ORDER ORDER BY LINE,ENTRY_TIME DESC) AS DSCRNK
	, LINE
	, ENTRY_TIME
FROM #PHQ9_QUESTIONS_TOTAL_SCORE_STAGING
) AS TEMP
WHERE DSCRNK = 1


-- Listing GAD-7 question responses and total score.

IF OBJECT_ID('TEMPDB..#GAD_7_QUESTIONS_SCORE_STAGING', 'U') IS NOT NULL DROP TABLE #GAD_7_QUESTIONS_SCORE_STAGING

SELECT 
	E.PAT_ID
	, E.PAT_ENC_CSN_ID
	, P.PAT_MRN_ID
	, IP_FLWSHT_REC.FSD_ID
	, GP.FLO_MEAS_NAME
	, IP_FLWSHT_MEAS.FLO_MEAS_ID
	, IP_FLWSHT_MEAS.MEAS_VALUE
	, CASE WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '15941' THEN 1 -- Question 1 from questionnaire
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '15956' THEN 2
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '15959' THEN 3
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '15962' THEN 4
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '15976' THEN 5
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '15996' THEN 6
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '15997' THEN 7
			WHEN IP_FLWSHT_MEAS.FLO_MEAS_ID = '15998' THEN 8 -- total score
			END AS GAD7_QSTN_ORDER
	, IP_FLWSHT_MEAS.LINE
	, IP_FLWSHT_MEAS.ENTRY_TIME
INTO #GAD_7_QUESTIONS_SCORE_STAGING
FROM CLARITY.dbo.PAT_ENC E
		INNER JOIN #SAMHSA_ENC_STAGING_2 SAMHSA ON E.PAT_ENC_CSN_ID = SAMHSA.PAT_ENC_CSN_ID
		INNER JOIN CLARITY.dbo.PATIENT P ON P.PAT_ID= E.PAT_ID
		LEFT JOIN CLARITY.dbo.IP_DATA_STORE on IP_DATA_STORE.EPT_CSN=E.PAT_ENC_CSN_ID
		LEFT JOIN CLARITY.dbo.IP_FLWSHT_REC on IP_FLWSHT_REC.INPATIENT_DATA_ID=IP_DATA_STORE.INPATIENT_DATA_ID
		LEFT JOIN CLARITY.dbo.IP_FLWSHT_MEAS on IP_FLWSHT_MEAS.FSD_ID=IP_FLWSHT_REC.FSD_ID 
		LEFT JOIN CLARITY.dbo.IP_FLO_GP_DATA GP ON IP_FLWSHT_MEAS.FLO_MEAS_ID = GP.FLO_MEAS_ID
WHERE 1 = 1
	AND IP_FLWSHT_MEAS.FLO_MEAS_ID IN (
										'15941'
										,'15956'
										,'15959'
										,'15962'
										,'15976'
										,'15996'
										,'15997'
										,'15998'
										 )
ORDER BY E.PAT_ID, E.PAT_ENC_CSN_ID, IP_FLWSHT_REC.FSD_ID, IP_FLWSHT_MEAS.FLO_MEAS_ID


IF OBJECT_ID('TEMPDB..#GAD_7_QUESTIONS_SCORE', 'U') IS NOT NULL DROP TABLE #GAD_7_QUESTIONS_SCORE

SELECT *
INTO #GAD_7_QUESTIONS_SCORE
FROM
(
SELECT 
	PAT_ID
	, PAT_ENC_CSN_ID
	, PAT_MRN_ID
	, FSD_ID
	, FLO_MEAS_NAME
	, FLO_MEAS_ID
	, GAD7_QSTN_ORDER
	, MEAS_VALUE
	, RANK() OVER (PARTITION BY PAT_ENC_CSN_ID,GAD7_QSTN_ORDER ORDER BY LINE,ENTRY_TIME DESC) AS DSCRNK
	, LINE
	, ENTRY_TIME
FROM #GAD_7_QUESTIONS_SCORE_STAGING
) AS TEMP
WHERE DSCRNK = 1


-- PHQ-9 results pivoting

-- CSN list for PHQ-9 results, for base list for later joins

IF OBJECT_ID('TEMPDB..#PHQ_9_CSN_LIST', 'U') IS NOT NULL DROP TABLE #PHQ_9_CSN_LIST

SELECT DISTINCT PAT_ENC_CSN_ID
INTO #PHQ_9_CSN_LIST
FROM #PHQ9_QUESTIONS_TOTAL_SCORE


IF OBJECT_ID('TEMPDB..#PHQ9_QSTN_PIVOT', 'U') IS NOT NULL DROP TABLE #PHQ9_QSTN_PIVOT

SELECT MAIN.PAT_ENC_CSN_ID
		, Q1.MEAS_VALUE AS PHQ9_Q1
		, Q2.MEAS_VALUE AS PHQ9_Q2
		, Q3.MEAS_VALUE AS PHQ9_Q3
		, Q4.MEAS_VALUE AS PHQ9_Q4
		, Q5.MEAS_VALUE AS PHQ9_Q5
		, Q6.MEAS_VALUE AS PHQ9_Q6
		, Q7.MEAS_VALUE AS PHQ9_Q7
		, Q8.MEAS_VALUE AS PHQ9_Q8
		, Q9.MEAS_VALUE AS PHQ9_Q9
		, Q10.MEAS_VALUE AS PHQ9_Total_Score
		, Q11.MEAS_VALUE AS PHQ9_Score_Category
INTO #PHQ9_QSTN_PIVOT
FROM #PHQ_9_CSN_LIST MAIN
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #PHQ9_QUESTIONS_TOTAL_SCORE
	WHERE PHQ9_QSTN_ORDER = 1

) AS Q1
	ON MAIN.PAT_ENC_CSN_ID = Q1.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #PHQ9_QUESTIONS_TOTAL_SCORE
	WHERE PHQ9_QSTN_ORDER = 2

) AS Q2
	ON MAIN.PAT_ENC_CSN_ID = Q2.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #PHQ9_QUESTIONS_TOTAL_SCORE
	WHERE PHQ9_QSTN_ORDER = 3

) AS Q3
	ON MAIN.PAT_ENC_CSN_ID = Q3.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #PHQ9_QUESTIONS_TOTAL_SCORE
	WHERE PHQ9_QSTN_ORDER = 4

) AS Q4
	ON MAIN.PAT_ENC_CSN_ID = Q4.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #PHQ9_QUESTIONS_TOTAL_SCORE
	WHERE PHQ9_QSTN_ORDER = 5

) AS Q5
	ON MAIN.PAT_ENC_CSN_ID = Q5.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #PHQ9_QUESTIONS_TOTAL_SCORE
	WHERE PHQ9_QSTN_ORDER = 6

) AS Q6
	ON MAIN.PAT_ENC_CSN_ID = Q6.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #PHQ9_QUESTIONS_TOTAL_SCORE
	WHERE PHQ9_QSTN_ORDER = 7

) AS Q7
	ON MAIN.PAT_ENC_CSN_ID = Q7.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #PHQ9_QUESTIONS_TOTAL_SCORE
	WHERE PHQ9_QSTN_ORDER = 8

) AS Q8
	ON MAIN.PAT_ENC_CSN_ID = Q8.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #PHQ9_QUESTIONS_TOTAL_SCORE
	WHERE PHQ9_QSTN_ORDER = 9

) AS Q9
	ON MAIN.PAT_ENC_CSN_ID = Q9.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #PHQ9_QUESTIONS_TOTAL_SCORE
	WHERE PHQ9_QSTN_ORDER = 10

) AS Q10
	ON MAIN.PAT_ENC_CSN_ID = Q10.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #PHQ9_QUESTIONS_TOTAL_SCORE
	WHERE PHQ9_QSTN_ORDER = 11

) AS Q11
	ON MAIN.PAT_ENC_CSN_ID = Q11.PAT_ENC_CSN_ID


-- GAD-7 results pivoting

-- CSN list for GAD-7 results, for base list for later joins

IF OBJECT_ID('TEMPDB..#GAD_7_CSN_LIST', 'U') IS NOT NULL DROP TABLE #GAD_7_CSN_LIST

SELECT DISTINCT PAT_ENC_CSN_ID
INTO #GAD_7_CSN_LIST
FROM #GAD_7_QUESTIONS_SCORE


IF OBJECT_ID('TEMPDB..#GAD7_QUESTION_PIVOT', 'U') IS NOT NULL DROP TABLE #GAD7_QUESTION_PIVOT

SELECT MAIN.PAT_ENC_CSN_ID
		, Q1.MEAS_VALUE AS GAD7_Q1
		, Q2.MEAS_VALUE AS GAD7_Q2
		, Q3.MEAS_VALUE AS GAD7_Q3
		, Q4.MEAS_VALUE AS GAD7_Q4
		, Q5.MEAS_VALUE AS GAD7_Q5
		, Q6.MEAS_VALUE AS GAD7_Q6
		, Q7.MEAS_VALUE AS GAD7_Q7
		, Q8.MEAS_VALUE AS GAD7_Total_Score
INTO #GAD7_QUESTION_PIVOT
FROM #GAD_7_CSN_LIST MAIN
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #GAD_7_QUESTIONS_SCORE
	WHERE GAD7_QSTN_ORDER = 1

) AS Q1
	ON MAIN.PAT_ENC_CSN_ID = Q1.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #GAD_7_QUESTIONS_SCORE
	WHERE GAD7_QSTN_ORDER = 2

) AS Q2
	ON MAIN.PAT_ENC_CSN_ID = Q2.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #GAD_7_QUESTIONS_SCORE
	WHERE GAD7_QSTN_ORDER = 3

) AS Q3
	ON MAIN.PAT_ENC_CSN_ID = Q3.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #GAD_7_QUESTIONS_SCORE
	WHERE GAD7_QSTN_ORDER = 4

) AS Q4
	ON MAIN.PAT_ENC_CSN_ID = Q4.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #GAD_7_QUESTIONS_SCORE
	WHERE GAD7_QSTN_ORDER = 5

) AS Q5
	ON MAIN.PAT_ENC_CSN_ID = Q5.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #GAD_7_QUESTIONS_SCORE
	WHERE GAD7_QSTN_ORDER = 6

) AS Q6
	ON MAIN.PAT_ENC_CSN_ID = Q6.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #GAD_7_QUESTIONS_SCORE
	WHERE GAD7_QSTN_ORDER = 7

) AS Q7
	ON MAIN.PAT_ENC_CSN_ID = Q7.PAT_ENC_CSN_ID
LEFT JOIN 
(
	SELECT PAT_ENC_CSN_ID, MEAS_VALUE 
	FROM #GAD_7_QUESTIONS_SCORE
	WHERE GAD7_QSTN_ORDER = 8

) AS Q8
	ON MAIN.PAT_ENC_CSN_ID = Q8.PAT_ENC_CSN_ID


-- Listing encounters with at least one trigger point reference in provider notes

IF (OBJECT_ID('tempdb..#TRIGGER_POINT') IS NOT NULL)
DROP TABLE #TRIGGER_POINT

SELECT DISTINCT 
	HNO.PAT_ENC_CSN_ID
INTO #TRIGGER_POINT
FROM CLARITY.dbo.HNO_INFO as HNO
INNER JOIN #PAIN_ENC_LIST_STAGING STG
	ON HNO.PAT_ENC_CSN_ID = STG.PAT_ENC_CSN_ID
INNER JOIN CLARITY.dbo.NOTE_SMARTPHRASE_IDS as NSP
	ON HNO.NOTE_ID = NSP.NOTE_ID
INNER JOIN CLARITY.dbo.CL_SPHR as HH1
	ON HH1.SMARTPHRASE_ID = NSP.SMARTPHRASES_ID
AND HH1.SMARTPHRASE_NAME LIKE '%PROCTRIGGERPOINT%' --trigger point dotphrase


-- Final encounter table

IF OBJECT_ID ('dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS', 'U') IS NOT NULL DROP TABLE dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS

SELECT DISTINCT ENCS.PAT_ID
		, ENCS.HSP_ACCOUNT_ID
		, ENCS.PAT_ENC_CSN_ID
		, ENCS.CONTACT_DATE
		, CASE WHEN TP.PAT_ENC_CSN_ID IS NOT NULL THEN 1 ELSE 0 END AS TRIGGER_POINT_FLAG
		, ENCS.ADT_PAT_CLASS_NM
		, BPC.BASE_PAT_CLASS_NM
		, ENCS.ENC_TYPE_NM
		, ENCS.PATIENT_STAT_NM
		, ENCS.ACUITY_LEVEL_NM
		, ENCS.APPT_PRC_ID
		, ENCS.APPT_PRC_NM
		, ENCS.DEPARTMENT_NAME
		, CAST(RSN.RSN_FOR_VISIT_LIST AS VARCHAR(2000)) AS RSN_FOR_VISIT_LIST -- forcing varchar for export
		, CAST(RSN.OTHER_RSN_LIST AS VARCHAR(2000)) AS OTHER_RSN_LIST -- same
		, ENCS.ADT_ARRIVAL_TIME
		, ENCS.VISIT_PROV_ID
		, ENCS.PCP_PROV_ID
		, ENCS.PRIMARY_LOC_NM
		, ENCS.ADMISSION_PROV_ID
		, ENCS.BILL_ATTEND_PROV_ID
		, ENCS.APPT_TIME
		--, ENCS.APPT_LENGTH
		, APPT.CHECKIN_DTTM
		, APPT.CHECKOUT_DTTM
		, ENCS.CANCEL_REASON_NM
		, ENCS.CANCEL_REASON_CMT
		, ENCS.APPT_STATUS_NM
		, ENCS.HOSP_ADMSN_TIME
		, ENCS.INP_ADM_DATE
		, ENCS.OP_ADM_DATE
		, ENCS.EMER_ADM_DATE
		, ENCS.ADMIT_SOURCE_NM
		, ENCS.HOSP_ADMSN_TYPE_NM
		, ENCS.ADMIT_CONF_STAT_NM
		, ENCS.LOS_PRIME_PROC_CD
		, ENCS.LOS_PRIME_PROC_NM
		, ENCS.HOSP_DISCH_TIME
		, ENCS.DISCH_CONF_STAT_NM
		, ENCS.DISCH_DISP_NM
		, PPF.BENEFIT_PLAN_NAME
		, PPF.FINANCIAL_CLASS_NAME
		, PPF.PAYOR_NAME
		, PPF.PRODUCT_TYPE
		, PHQ9.PHQ9_Q1
		, PHQ9.PHQ9_Q2
		, PHQ9.PHQ9_Q3
		, PHQ9.PHQ9_Q4
		, PHQ9.PHQ9_Q5
		, PHQ9.PHQ9_Q6
		, PHQ9.PHQ9_Q7
		, PHQ9.PHQ9_Q8
		, PHQ9.PHQ9_Q9
		, PHQ9.PHQ9_Total_Score
		, PHQ9.PHQ9_Score_Category
		, GAD7.GAD7_Q1
		, GAD7.GAD7_Q2
		, GAD7.GAD7_Q3
		, GAD7.GAD7_Q4
		, GAD7.GAD7_Q5
		, GAD7.GAD7_Q6
		, GAD7.GAD7_Q7
		, GAD7.GAD7_Total_Score
INTO dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS
FROM #SAMHSA_ENC_STAGING_2 ENCS
LEFT JOIN #PAYOR_PLAN_FC PPF
	ON ENCS.PAT_ENC_CSN_ID = PPF.PAT_ENC_CSN_ID
LEFT JOIN #RSN_FOR_VISIT_STUFF RSN
	ON ENCS.PAT_ENC_CSN_ID = RSN.PAT_ENC_CSN_ID
LEFT JOIN CLARITY.dbo.F_SCHED_APPT APPT
	ON ENCS.PAT_ENC_CSN_ID = APPT.PAT_ENC_CSN_ID
LEFT JOIN #BASE_PAT_CLASS BPC
	ON ENCS.PAT_ENC_CSN_ID = BPC.PAT_ENC_CSN_ID
LEFT JOIN #PHQ9_QSTN_PIVOT PHQ9 
	ON ENCS.PAT_ENC_CSN_ID = PHQ9.PAT_ENC_CSN_ID
LEFT JOIN #GAD7_QUESTION_PIVOT GAD7 
	ON ENCS.PAT_ENC_CSN_ID = GAD7.PAT_ENC_CSN_ID
LEFT JOIN #TRIGGER_POINT TP
	ON ENCS.PAT_ENC_CSN_ID = TP.PAT_ENC_CSN_ID
WHERE 1 = 1
	AND (ENCS.ADMIT_CONF_STAT_NM = 'Completed' OR ENCS.ADMIT_CONF_STAT_NM = 'Confirmed' OR ENCS.ADMIT_CONF_STAT_NM IS NULL)
	AND (ENCS.DISCH_CONF_STAT_NM = 'Confirmed' OR ENCS.DISCH_CONF_STAT_NM IS NULL)
ORDER BY PAT_ENC_CSN_ID

CREATE INDEX PAT_ENC_CSN_ID ON dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS (PAT_ENC_CSN_ID)


---- Medication Data

-- Listing medication ID numbers using the opioid grouper

IF OBJECT_ID('TEMPDB..#OPIOID_MED_LIST', 'U') IS NOT NULL DROP TABLE #OPIOID_MED_LIST

SELECT DISTINCT MEDICATION_ID
INTO #OPIOID_MED_LIST
FROM CLARITY.dbo.CLARITY_MEDICATION CM
INNER JOIN CLARITY.dbo.GROUPER_COMPILED_REC_LIST as GCR
	ON CM.MEDICATION_ID = GCR.GROUPER_RECORDS_NUMERIC_ID
	AND GCR.BASE_GROUPER_ID = '105435' --JPS OPIOID Grouper
ORDER BY MEDICATION_ID

CREATE INDEX MED_ID ON #OPIOID_MED_LIST (MEDICATION_ID)


-- Listing MAR medication administrations, using EMR Reporting code for MAR administrations

IF OBJECT_ID('TEMPDB..#SAMHSA_MAR_GIVEN', 'U') IS NOT NULL DROP TABLE #SAMHSA_MAR_GIVEN

SELECT DISTINCT MAR.MAR_ENC_CSN, MAR.ORDER_MED_ID
INTO #SAMHSA_MAR_GIVEN
FROM CLARITY.dbo.MAR_ADMIN_INFO MAR
INNER JOIN CLARITY.dbo.ORDER_MED OM
	ON MAR.ORDER_MED_ID = OM.ORDER_MED_ID
INNER JOIN dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS SBST
	ON OM.PAT_ENC_CSN_ID = SBST.PAT_ENC_CSN_ID
WHERE 1 = 1
	AND MAR.MAR_ACTION_C IN ('1',    --Given
								'6',    --New Bag
								'12',   --Bolus
								'13',   --Push
								'102',  --Given by Other
								'105',  --New Syringe/Cartridge
								'113',  --Given During Downtime
								'114',  --Started During Downtime
								'115',  --Patch Applied
								'117',  --Bolus from Bag
								'118',  --Physician Administered
								'119',  --Feeding given
								'127',  --Completed
								'3050', --Partial
								'3051'  --Anesthesia Bolus
							)

-- Medications that are opioid alternatives, using code from JPS ED data analysts

/* create list of alternative meds that are not Opioids */

IF OBJECT_ID('tempdb..#ALT_MEDS') IS NOT NULL DROP TABLE #ALT_MEDS

SELECT ALT.MEDICATION_ID
	,ALT.MEDICATION_NAME
	,ALT.GENERIC_NAME
	,MAX(COALESCE(CASE WHEN ALTERNATIVE_CLASS = 'MUSCLE RELAXANT' THEN ALTERNATIVE_CLASS ELSE NULL END
		,CASE WHEN ALTERNATIVE_CLASS = 'ANTI-CONVULSANT' THEN ALTERNATIVE_CLASS ELSE NULL END
		,CASE WHEN ALTERNATIVE_CLASS = 'ANTI-DEPRESSANT' THEN ALTERNATIVE_CLASS ELSE NULL END
		,CASE WHEN ALTERNATIVE_CLASS = 'KETAMINE' THEN ALTERNATIVE_CLASS ELSE NULL END
		,CASE WHEN ALTERNATIVE_CLASS = 'NSAID' THEN ALTERNATIVE_CLASS ELSE NULL END
		,CASE WHEN ALTERNATIVE_CLASS = 'LOCAL ANESTHETICS' THEN ALTERNATIVE_CLASS ELSE NULL END
	)) as ALTERNATIVE_CLASS
	,MAX(CASE WHEN ALTERNATIVE_CLASS = 'MUSCLE RELAXANT' THEN 1 ELSE 0 END) as IS_MUSCLE_RELAXANT
	,MAX(CASE WHEN ALTERNATIVE_CLASS = 'ANTI-CONVULSANT' THEN 1 ELSE 0 END) as IS_ANTI_CONVULSANT
	,MAX(CASE WHEN ALTERNATIVE_CLASS = 'ANTI-DEPRESSANT' THEN 1 ELSE 0 END) as IS_ANTI_DEPRESSANT
	,MAX(CASE WHEN ALTERNATIVE_CLASS = 'KETAMINE' THEN 1 ELSE 0 END) as IS_KETAMINE
	,MAX(CASE WHEN ALTERNATIVE_CLASS = 'NSAID' THEN 1 ELSE 0 END) as IS_NSAID
	,MAX(CASE WHEN ALTERNATIVE_CLASS = 'LOCAL ANESTHETICS' THEN 1 ELSE 0 END) as IS_LOCAL_ANESTHETIC
INTO #ALT_MEDS
FROM (
SELECT MEDICATION_ID
	,NAME as MEDICATION_NAME
	,GENERIC_NAME
	,CAST('MUSCLE RELAXANT' AS VARCHAR(255)) as ALTERNATIVE_CLASS
FROM CLARITY.dbo.CLARITY_MEDICATION
WHERE (GENERIC_NAME LIKE 'BACLOFEN%'
OR GENERIC_NAME LIKE 'CYCLOBENZAPRINE%'
OR GENERIC_NAME LIKE 'DIAZEPAM%'
OR GENERIC_NAME LIKE 'METHOCARBAMOL%'
OR GENERIC_NAME LIKE 'TIZANIDINE%'
OR GENERIC_NAME LIKE 'DICYCLOMINE%'
)
UNION
SELECT MEDICATION_ID
	,NAME as MEDICATION_NAME
	,GENERIC_NAME
	,CAST('NSAID' AS VARCHAR(255)) as ALTERNATIVE_CLASS
FROM CLARITY.dbo.CLARITY_MEDICATION
WHERE (GENERIC_NAME LIKE 'ASA%'
OR GENERIC_NAME LIKE 'ASPIRIN%'
OR GENERIC_NAME LIKE 'ACETAMINOPHEN%'
OR GENERIC_NAME LIKE 'CELECOXIB%'
OR GENERIC_NAME LIKE 'DICLOFEN%'
OR GENERIC_NAME LIKE 'HYDROCODONE%'
OR GENERIC_NAME LIKE 'IBUPROFEN%'
OR GENERIC_NAME LIKE 'INDOMETHACIN%'
OR GENERIC_NAME LIKE 'KETOPROFEN%'
OR GENERIC_NAME LIKE 'KETOROLAC%'
OR GENERIC_NAME LIKE 'LANSOPRAZOLE%'
OR GENERIC_NAME LIKE 'MELOXICAM%'
OR GENERIC_NAME LIKE 'METHOCARBAMOL%'
OR GENERIC_NAME LIKE 'NAPROXEN%'
OR GENERIC_NAME LIKE 'SALICYL%'
OR GENERIC_NAME LIKE 'SUMATRIPTAN%'
)
UNION
SELECT MEDICATION_ID
	,NAME as MEDICATION_NAME
	,GENERIC_NAME
	,CAST('ANTI-CONVULSANT' AS VARCHAR(255)) as ALTERNATIVE_CLASS
FROM CLARITY.dbo.CLARITY_MEDICATION
WHERE (GENERIC_NAME LIKE 'CARBAMAZEPINE%'
OR GENERIC_NAME LIKE 'CLONAZEPAM%'
OR GENERIC_NAME LIKE 'DIAZEPAM%'
OR GENERIC_NAME LIKE 'GABAPENTIN%'
OR GENERIC_NAME LIKE 'LOREZEPAM%'
OR GENERIC_NAME LIKE 'PREGABALIN%')
UNION
SELECT MEDICATION_ID
	,NAME as MEDICATION_NAME
	,GENERIC_NAME
	,CAST('ANTI-DEPRESSANT' AS VARCHAR(255)) as ALTERNATIVE_CLASS
FROM CLARITY.dbo.CLARITY_MEDICATION
WHERE (GENERIC_NAME LIKE 'AMITRIPTYLINE%'
OR GENERIC_NAME LIKE 'NORTRIPTYLINE%')
UNION
SELECT MEDICATION_ID
	,NAME as MEDICATION_NAME
	,GENERIC_NAME
	,CAST('KETAMINE' AS VARCHAR(255)) as ALTERNATIVE_CLASS
FROM CLARITY.dbo.CLARITY_MEDICATION
WHERE (GENERIC_NAME LIKE 'KETAMINE%')
UNION
SELECT MEDICATION_ID
	,NAME as MEDICATION_NAME
	,GENERIC_NAME
	,CAST('DDAVP' AS VARCHAR(255)) as ALTERNATIVE_CLASS
FROM CLARITY.dbo.CLARITY_MEDICATION
WHERE (MEDICATION_ID = 21135)
UNION
SELECT MEDICATION_ID
	,NAME as MEDICATION_NAME
	,GENERIC_NAME
	,CAST('LOCAL ANESTHETICS' AS VARCHAR(255)) as ALTERNATIVE_CLASS
FROM CLARITY.dbo.CLARITY_MEDICATION
WHERE (GENERIC_NAME LIKE 'LIDOCAINE%' OR GENERIC_NAME LIKE 'BUPIVACAINE%' OR GENERIC_NAME LIKE 'ROPIVACAINE%' OR GENERIC_NAME LIKE 'COCAINE%')
) as ALT
LEFT JOIN CLARITY.dbo.GROUPER_COMPILED_REC_LIST as GCR
ON ALT.MEDICATION_ID = GCR.GROUPER_RECORDS_NUMERIC_ID
AND GCR.BASE_GROUPER_ID = '105435' --not in the opioid grouper
WHERE GCR.GROUPER_RECORDS_NUMERIC_ID IS NULL --not in the opioid grouper
GROUP BY ALT.MEDICATION_ID
	,ALT.MEDICATION_NAME
	,ALT.GENERIC_NAME


/* gen list of alternative medication orders */

IF OBJECT_ID('tempdb..#ALT_PAIN_MED') IS NOT NULL DROP TABLE #ALT_PAIN_MED

SELECT OMED.ORDER_MED_ID
	,OMED.PAT_ID
	,OMED.PAT_ENC_CSN_ID
	,OMED.ORDER_INST
	,AM.MEDICATION_ID
	,AM.MEDICATION_NAME
	,AM.GENERIC_NAME
	,AM.ALTERNATIVE_CLASS
	,AM.IS_MUSCLE_RELAXANT
	,AM.IS_ANTI_CONVULSANT
	,AM.IS_ANTI_DEPRESSANT
	,AM.IS_NSAID
	,AM.IS_KETAMINE
	,AM.IS_LOCAL_ANESTHETIC
	,ZOM.NAME as ORDER_MODE
	,OMED.HV_DISCRETE_DOSE
	,MAR.SIG as MAR_DOSE
INTO #ALT_PAIN_MED
FROM CLARITY.dbo.ORDER_MED as OMED
INNER JOIN dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS as SAMHSA
ON OMED.PAT_ENC_CSN_ID = SAMHSA.PAT_ENC_CSN_ID
INNER JOIN #ALT_MEDS as AM
ON AM.MEDICATION_ID = OMED.MEDICATION_ID
LEFT JOIN CLARITY.dbo.ZC_ORDERING_MODE as ZOM
ON ZOM.ORDERING_MODE_C = OMED.ORDERING_MODE_C
LEFT JOIN CLARITY.dbo.MAR_ADMIN_INFO as MAR
ON MAR.ORDER_MED_ID = OMED.ORDER_MED_ID
AND MAR.LINE = 1
WHERE (OMED.ORDER_CLASS_C <> 3 OR OMED.ORDER_CLASS_C IS NULL) --not historical
AND (OMED.ORDER_STATUS_C IS NULL OR OMED.ORDER_STATUS_C <> 4) --not canceled
AND OMED.PAT_LOC_ID = 101002001 --ED order criteria
AND OMED.LOGIN_DEP_ID = 101002001


-- Multimodal pain management order sets medications

IF OBJECT_ID('TEMPDB..#MULTIMODAL_MED_ORDER_SETS', 'U') IS NOT NULL DROP TABLE #MULTIMODAL_MED_ORDER_SETS

SELECT ORD_MET.PAT_ENC_CSN_ID, ORD_MET.ORDER_ID, PROTOCOL_ID, PROTOCOL_NAME, ORD_MET.PRL_ORDERSET_ID
		, MED.MEDICATION_ID, MED.GENERIC_NAME, MED.NAME
INTO #MULTIMODAL_MED_ORDER_SETS
FROM CLARITY.dbo.CL_PRL_SS PRL
INNER JOIN CLARITY.dbo.ORDER_METRICS ORD_MET
	ON PRL.PROTOCOL_ID = ORD_MET.PRL_ORDERSET_ID
INNER JOIN dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS SAMHSA
	ON ORD_MET.PAT_ENC_CSN_ID = SAMHSA.PAT_ENC_CSN_ID
--LEFT JOIN CLARITY.dbo.ORDER_PROC OP
--	ON ORD_MET.ORDER_ID = OP.ORDER_PROC_ID
INNER JOIN CLARITY.dbo.ORDER_MED OM		-- ORDER_METRICS has medications and procedures, this limits results to medications
	ON ORD_MET.ORDER_ID = OM.ORDER_MED_ID
--LEFT JOIN CLARITY.dbo.CLARITY_EAP EAP
--	ON OP.PROC_ID = EAP.PROC_ID
LEFT JOIN CLARITY.dbo.CLARITY_MEDICATION MED
	ON OM.MEDICATION_ID = MED.MEDICATION_ID
WHERE 1 = 1
	AND ORD_MET.PRL_ORDERSET_ID IN (304002285,40810000) --ed/IP multimodal orderset
ORDER BY ORD_MET.ORDER_ID

CREATE INDEX MED_ORDER_ID ON #MULTIMODAL_MED_ORDER_SETS(ORDER_ID)


-- Listing all medication Order ID Numbers needed for pulling the medications extract - 
-- opioids, opioid alternatives, and (if not listed already) medications in the two
-- multimodal pain management order sets

IF OBJECT_ID('TEMPDB..#MED_ORDER_ID_INCL', 'U') IS NOT NULL DROP TABLE #MED_ORDER_ID_INCL

SELECT DISTINCT PAT_ENC_CSN_ID, ORDER_MED_ID
INTO #MED_ORDER_ID_INCL
FROM
(
	-- Opoid medications

	SELECT OM.PAT_ENC_CSN_ID, OM.ORDER_MED_ID
	FROM #OPIOID_MED_LIST OPD
	INNER JOIN CLARITY.dbo.ORDER_MED OM
		ON OPD.MEDICATION_ID = OM.MEDICATION_ID
	INNER JOIN dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS SAMHSA
		ON OM.PAT_ENC_CSN_ID = SAMHSA.PAT_ENC_CSN_ID
	
	UNION

	-- Opioid alternatives

	SELECT PAT_ENC_CSN_ID, ORDER_MED_ID FROM #ALT_PAIN_MED

	UNION

	-- Order set medications

	SELECT PAT_ENC_CSN_ID, ORDER_ID AS ORDER_MED_ID FROM #MULTIMODAL_MED_ORDER_SETS

) AS TEMP
ORDER BY ORDER_MED_ID

CREATE INDEX ORDER_MED_ID ON #MED_ORDER_ID_INCL(ORDER_MED_ID)


-- Pharmaceutical classes

IF OBJECT_ID('TEMPDB..#SAMHSA_PHARM_CLASS_LIST', 'U') IS NOT NULL DROP TABLE #SAMHSA_PHARM_CLASS_LIST

SELECT DISTINCT OM.MEDICATION_ID
				--, PHCL.PHARM_CLASS_NAME
				, PHCL.NAME AS PHARM_CLASS_NAME
INTO #SAMHSA_PHARM_CLASS_LIST
FROM CLARITY.dbo.ORDER_MED OM
INNER JOIN dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS SAMHSA
	ON OM.PAT_ENC_CSN_ID = SAMHSA.PAT_ENC_CSN_ID
--LEFT JOIN CLARITY.dbo.CLARITY_PHARM_CLS PHCL
--	ON OM.MEDICATION_ID = PHCL.MEDICATION_ID
LEFT JOIN CLARITY.dbo.CLARITY_MEDICATION CM
	ON OM.MEDICATION_ID = CM.MEDICATION_ID
LEFT JOIN CLARITY.dbo.ZC_PHARM_CLASS PHCL
	ON CM.PHARM_CLASS_C = PHCL.PHARM_CLASS_C
ORDER BY OM.MEDICATION_ID


-- Concatenating pharmacy classes

IF OBJECT_ID('TEMPDB..#PHARM_CLASS_STUFF', 'U') IS NOT NULL DROP TABLE #PHARM_CLASS_STUFF

SELECT DISTINCT 
	MEDICATION_ID
	, STUFF((
		SELECT DISTINCT '|'  + PHCL.PHARM_CLASS_NAME
		FROM #SAMHSA_PHARM_CLASS_LIST PHCL WHERE PHCL. MEDICATION_ID = PHARMCLASS.MEDICATION_ID
		FOR XML PATH('')
	),1,1,'') PHARM_CLASS_LIST
INTO 
	#PHARM_CLASS_STUFF
FROM 
	#SAMHSA_PHARM_CLASS_LIST PHARMCLASS
GROUP BY 
	PHARMCLASS. MEDICATION_ID
ORDER BY MEDICATION_ID;


-- Pharmacy subclasses

IF OBJECT_ID('TEMPDB..#SAMHSA_PHARM_SBCLS_LIST', 'U') IS NOT NULL DROP TABLE #SAMHSA_PHARM_SBCLS_LIST

SELECT DISTINCT OM.MEDICATION_ID
				, PHSBCL.PHARM_SUBCLASS_C
				, ZCPHSBCL.NAME AS PHARM_SBCLS_NAME
INTO #SAMHSA_PHARM_SBCLS_LIST
FROM CLARITY.dbo.ORDER_MED OM
INNER JOIN dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS SAMHSA
	ON OM.PAT_ENC_CSN_ID = SAMHSA.PAT_ENC_CSN_ID
LEFT JOIN CLARITY.dbo.RX_MED_SUBCLS PHSBCL
	ON OM.MEDICATION_ID = PHSBCL.MEDICATION_ID
LEFT JOIN CLARITY.dbo.ZC_PHARM_SUBCLASS ZCPHSBCL
	ON PHSBCL.PHARM_SUBCLASS_C = ZCPHSBCL.PHARM_SUBCLASS_C
ORDER BY OM.MEDICATION_ID


-- Concatenating pharmacy subclasses

IF OBJECT_ID('TEMPDB..#PHARM_SBCL_STUFF', 'U') IS NOT NULL DROP TABLE #PHARM_SBCL_STUFF

SELECT DISTINCT 
	MEDICATION_ID
	, STUFF((
		SELECT DISTINCT '|'  + PHSBCL.PHARM_SBCLS_NAME
		FROM #SAMHSA_PHARM_SBCLS_LIST PHSBCL WHERE PHSBCL. MEDICATION_ID = PHARMSBCL.MEDICATION_ID
		FOR XML PATH('')
	),1,1,'') PHARM_SBCLS_LIST
INTO 
	#PHARM_SBCL_STUFF
FROM 
	#SAMHSA_PHARM_SBCLS_LIST PHARMSBCL
GROUP BY 
	PHARMSBCL.MEDICATION_ID
ORDER BY MEDICATION_ID;

--SELECT * FROM #PHARM_SBCL_STUFF ORDER BY MEDICATION_ID


-- Final medications table

IF OBJECT_ID ('dbo.SAMHSA_GRANT_REPORTING_MEDICATIONS', 'U') IS NOT NULL DROP TABLE dbo.SAMHSA_GRANT_REPORTING_MEDICATIONS

SELECT OM.PAT_ID
		, OM.PAT_ENC_CSN_ID
		, OM.ORDER_MED_ID
		, OMI.DISPENSABLE_MED_ID
		, OM.ORDERING_DATE
		, ZCOM.NAME AS ORDERING_MODE_NM
		, ZCOS.NAME AS ORDER_STATUS_NM
		, CASE WHEN MAR.ORDER_MED_ID IS NOT NULL THEN 1 ELSE 0 END AS MAR_GIVEN_YN
		, CASE WHEN ALT_MEDS.ORDER_MED_ID IS NOT NULL THEN 1 ELSE 0 END AS OPIOID_ALTERNATIVE_FLAG
		, CASE WHEN OPD.MEDICATION_ID IS NOT NULL THEN 1 ELSE 0 END AS OPIOID_FLAG
		, CASE WHEN (MLT.ORDER_ID IS NOT NULL AND MLT.PRL_ORDERSET_ID = '304002285') THEN 1 ELSE 0 END AS MULTIMODAL_ED_FLAG
		, CASE WHEN (MLT.ORDER_ID IS NOT NULL AND MLT.PRL_ORDERSET_ID = '40810000') THEN 1 ELSE 0 END AS MULTIMODAL_IP_FLAG
		, OM.[START_DATE]
		, OM.END_DATE
		, OM.DISCON_TIME
		, CM.NAME AS MEDICATION_NAME
		, ZCTC.NAME AS THERA_CLASS_NM
		, CAST(PCS.PHARM_CLASS_LIST AS VARCHAR(2000)) AS PHARM_CLASS_LIST -- forcing field format to avoid NTEXT and allow export
		, CAST(PSBCS.PHARM_SBCLS_LIST AS VARCHAR(2000)) AS PHARM_SBCLS_LIST
		, OM.QUANTITY
		, OM.REFILLS
		, MME.EQUIV_QTY AS MME
		, OM.MED_PRESC_PROV_ID
		, PAT_LOC.DEPARTMENT_NAME AS PAT_LOC_AT_ORDER
		, LOGIN_DEP.DEPARTMENT_NAME AS ORDERING_PROV_LOGIN_LOC
		, RXPHR.PHARMACY_NAME
		, OM.SIG
INTO dbo.SAMHSA_GRANT_REPORTING_MEDICATIONS
FROM CLARITY.dbo.ORDER_MED OM
INNER JOIN #MED_ORDER_ID_INCL SAMHSA_MED
	ON OM.PAT_ENC_CSN_ID = SAMHSA_MED.PAT_ENC_CSN_ID
	AND OM.ORDER_MED_ID = SAMHSA_MED.ORDER_MED_ID
LEFT JOIN CLARITY.dbo.ORDER_MEDINFO OMI
	ON OM.ORDER_MED_ID = OMI.ORDER_MED_ID
LEFT JOIN CLARITY.dbo.ZC_ORDERING_MODE ZCOM
	ON OM.ORDERING_MODE_C = ZCOM.ORDERING_MODE_C
LEFT JOIN CLARITY.dbo.ZC_ORDER_STATUS ZCOS
	ON OM.ORDER_STATUS_C = ZCOS.ORDER_STATUS_C
LEFT JOIN CLARITY.dbo.CLARITY_MEDICATION CM
	ON OM.MEDICATION_ID = CM.MEDICATION_ID
LEFT JOIN CLARITY.dbo.ZC_THERA_CLASS ZCTC
	ON CM.THERA_CLASS_C = ZCTC.THERA_CLASS_C
LEFT JOIN CLARITY.dbo.ZC_PHARMACY_TYPE PT
	ON OM.EXT_PHARMACY_TYPE_C = PT.PHARMACY_TYPE_C
LEFT JOIN CLARITY.dbo.ZC_RSN_FOR_DISCON DSCN
	ON OM.RSN_FOR_DISCON_C = DSCN.RSN_FOR_DISCON_C
LEFT JOIN CLARITY.dbo.RX_PHR RXPHR
	ON OM.PHARMACY_ID = RXPHR.PHARMACY_ID
LEFT JOIN #PHARM_CLASS_STUFF PCS
	ON OM.MEDICATION_ID = PCS.MEDICATION_ID
LEFT JOIN #PHARM_SBCL_STUFF PSBCS
	ON OM.MEDICATION_ID = PSBCS.MEDICATION_ID
LEFT JOIN CLARITY.dbo.CLARITY_DEP PAT_LOC
	ON OM.PAT_LOC_ID = PAT_LOC.DEPARTMENT_ID
LEFT JOIN CLARITY.dbo.CLARITY_DEP LOGIN_DEP
	ON OM.LOGIN_DEP_ID = LOGIN_DEP.DEPARTMENT_ID
LEFT JOIN #SAMHSA_MAR_GIVEN MAR
	ON OM.ORDER_MED_ID = MAR.ORDER_MED_ID
LEFT JOIN #ALT_PAIN_MED ALT_MEDS
	ON OM.ORDER_MED_ID = ALT_MEDS.ORDER_MED_ID
LEFT JOIN #OPIOID_MED_LIST OPD
	ON OM.MEDICATION_ID = OPD.MEDICATION_ID
LEFT JOIN #MULTIMODAL_MED_ORDER_SETS MLT
	ON OM.ORDER_MED_ID = MLT.ORDER_ID
LEFT JOIN CLARITY.dbo.RX_MED_EQUIV_INFO as MME
	ON OM.MEDICATION_ID = MME.MEDICATION_ID
	AND MME.EQUIV_UNIT_C = 408010116 --milligram morphine equivalence
WHERE 1 = 1
	AND (OM.ORDER_STATUS_C IS NULL OR OM.ORDER_STATUS_C <> 4) -- not Canceled 
ORDER BY OM.PAT_ID, OM.PAT_ENC_CSN_ID
		, OM.ORDER_MED_ID


-- Diagnosis list, SAMHSA encounters

-- Pain diagnoses

IF OBJECT_ID ('dbo.SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST', 'U') IS NOT NULL DROP TABLE dbo.SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST

SELECT *
INTO dbo.SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST
FROM
(

-- Visit diagnoses

SELECT DISTINCT 
		ALL_ENC.PAT_ID
		, ALL_ENC.PAT_ENC_CSN_ID
		, ALL_ENC.HSP_ACCOUNT_ID
		, 'PAT_ENC_DX' AS DIAGNOSIS_SOURCE
		, PEDX.DX_ID
		, PEDX.LINE
		, EDG.DX_NAME
		, EDG.CURRENT_ICD9_LIST
		, EDG.CURRENT_ICD10_LIST
		, PEDX.PRIMARY_DX_YN
		, CASE WHEN PAIN.DX_ID IS NOT NULL THEN 1 ELSE 0 END AS PAIN_DX_FLAG
FROM dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS ALL_ENC
LEFT JOIN CLARITY.dbo.PAT_ENC_DX  PEDX
	ON ALL_ENC.PAT_ENC_CSN_ID = PEDX.PAT_ENC_CSN_ID
LEFT JOIN CLARITY.dbo.CLARITY_EDG EDG 
	ON PEDX.DX_ID =	EDG.DX_ID
LEFT JOIN #PAIN_DX_IDS PAIN
	ON PEDX.DX_ID = PAIN.DX_ID

UNION

-- Hospital account diagnoses

SELECT DISTINCT
	ALL_ENC.PAT_ID
	, ALL_ENC.PAT_ENC_CSN_ID
	, ALL_ENC.HSP_ACCOUNT_ID
	, 'HSP_ACCT_DX_LIST' AS DIAGNOSIS_SOURCE
	, HADX.DX_ID
	, HADX.LINE
	, EDG.DX_NAME
	, EDG.CURRENT_ICD9_LIST
	, EDG.CURRENT_ICD10_LIST
	, '' AS PRIMARY_DX_YN
	, CASE WHEN PAIN.DX_ID IS NOT NULL THEN 1 ELSE 0 END AS PAIN_DX_FLAG
FROM dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS ALL_ENC									 
LEFT JOIN CLARITY.dbo.HSP_ACCT_DX_LIST HADX ON ALL_ENC.HSP_ACCOUNT_ID = HADX.HSP_ACCOUNT_ID
LEFT JOIN CLARITY.dbo.CLARITY_EDG EDG ON HADX.DX_ID = EDG.DX_ID
LEFT JOIN CLARITY.dbo.EDG_CURRENT_ICD10 ICD10 ON ICD10.DX_ID = HADX.DX_ID
LEFT JOIN CLARITY.dbo.EDG_CURRENT_ICD9 ICD9 ON ICD9.DX_ID = HADX.DX_ID
LEFT JOIN #PAIN_DX_IDS PAIN ON HADX.DX_ID = PAIN.DX_ID
) AS TEMP
WHERE 1 = 1
	AND TEMP.DX_NAME IS NOT NULL
ORDER BY PAT_ID, DIAGNOSIS_SOURCE, PAT_ENC_CSN_ID, LINE;


-- SAMHSA grant labs extract

-- Listing diagnoses connected to lab procedure orders

IF OBJECT_ID('TEMPDB..#ORDER_PROC_DX_LIST', 'U') IS NOT NULL DROP TABLE #ORDER_PROC_DX_LIST

SELECT DISTINCT ODP.PAT_ENC_CSN_ID
		, ODP.ORDER_PROC_ID
		, ODP.DX_ID
		, ODP.LINE AS LINE_DX
		--, ODP.ASSOC_DX_DESC -- always null
		, EDG.CURRENT_ICD9_LIST
		, EDG.CURRENT_ICD10_LIST
INTO #ORDER_PROC_DX_LIST
FROM CLARITY.dbo.ORDER_DX_PROC ODP
INNER JOIN dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS SAMHSA_ENC
	ON ODP.PAT_ENC_CSN_ID = SAMHSA_ENC.PAT_ENC_CSN_ID
LEFT JOIN CLARITY.dbo.CLARITY_EDG EDG
	ON ODP.DX_ID = EDG.DX_ID
--WHERE
ORDER BY ODP.PAT_ENC_CSN_ID, ODP.ORDER_PROC_ID, ODP.LINE


-- Concatenating diagnoses documented on SAMHSA encounter procedures, at the Order ID Number level

-- ICD9s

IF OBJECT_ID('TEMPDB..#ORDER_PROC_ICD9_STUFF', 'U') IS NOT NULL DROP TABLE #ORDER_PROC_ICD9_STUFF

SELECT DISTINCT 
	ORDER_PROC_ID
	, STUFF((
		SELECT DISTINCT '|'  + OPDXL.CURRENT_ICD9_LIST
		FROM #ORDER_PROC_DX_LIST OPDXL WHERE OPDXL.ORDER_PROC_ID = DXLIST.ORDER_PROC_ID
		FOR XML PATH('')
	),1,1,'') OPDX_ICD9_LIST
INTO 
	#ORDER_PROC_ICD9_STUFF
FROM 
	#ORDER_PROC_DX_LIST DXLIST
GROUP BY 
	DXLIST.PAT_ENC_CSN_ID, DXLIST.ORDER_PROC_ID;


-- ICD-10s

IF OBJECT_ID('TEMPDB..#ORDER_PROC_ICD10_STUFF', 'U') IS NOT NULL DROP TABLE #ORDER_PROC_ICD10_STUFF

SELECT DISTINCT 
	ORDER_PROC_ID
	, STUFF((
		SELECT DISTINCT '|'  + OPDXL.CURRENT_ICD10_LIST
		FROM #ORDER_PROC_DX_LIST OPDXL WHERE OPDXL.ORDER_PROC_ID = DXLIST.ORDER_PROC_ID
		FOR XML PATH('')
	),1,1,'') OPDX_ICD10_LIST
INTO 
	#ORDER_PROC_ICD10_STUFF
FROM 
	#ORDER_PROC_DX_LIST DXLIST
GROUP BY 
	DXLIST.PAT_ENC_CSN_ID, DXLIST.ORDER_PROC_ID;


-- Listing orders for labs that are finalized, and not finalized

IF OBJECT_ID('TEMPDB..#ORDER_PROC_FINALIZED', 'U') IS NOT NULL DROP TABLE #ORDER_PROC_FINALIZED

SELECT DISTINCT OP.ORDER_PROC_ID
INTO #ORDER_PROC_FINALIZED
FROM dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS SAMHSA_ENC
INNER JOIN CLARITY.dbo.ORDER_PROC OP
	ON SAMHSA_ENC.PAT_ID = OP.PAT_ID
INNER JOIN CLARITY.dbo.ORDER_RESULTS RES
	ON OP.ORDER_PROC_ID = RES.ORDER_PROC_ID
LEFT JOIN CLARITY.dbo.CLARITY_EAP EAP
	ON OP.PROC_ID = EAP.PROC_ID
WHERE 1 = 1
	AND OP.ORDER_TYPE_C != 999
	AND RES.RESULT_STATUS_C IN (3,4) -- Final, Corrected
	AND RES.LAB_STATUS_C IN (3,4,5) -- Final Results, Edited, Edited Result - FINAL
	AND OP.ORDER_STATUS_C NOT IN (4,7) -- Canceled, Denied Approval
	AND EAP.PROC_CODE = 'LAB3415' -- urine drug screen specific for ED-ALT RTRT project purposes
ORDER BY ORDER_PROC_ID

CREATE INDEX ORDER_PROC_ID ON #ORDER_PROC_FINALIZED(ORDER_PROC_ID)


IF OBJECT_ID('TEMPDB..#ORDER_PROC_NOT_FINALIZED', 'U') IS NOT NULL DROP TABLE #ORDER_PROC_NOT_FINALIZED

SELECT DISTINCT OP.ORDER_PROC_ID
INTO #ORDER_PROC_NOT_FINALIZED
FROM dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS SAMHSA_ENC
INNER JOIN CLARITY.dbo.ORDER_PROC OP
	ON SAMHSA_ENC.PAT_ENC_CSN_ID = OP.PAT_ENC_CSN_ID
INNER JOIN CLARITY.dbo.ORDER_RESULTS RES
	ON RES.ORDER_PROC_ID = OP.ORDER_PROC_ID
LEFT JOIN #ORDER_PROC_FINALIZED OPF
	ON OP.ORDER_PROC_ID = OPF.ORDER_PROC_ID
LEFT JOIN CLARITY.dbo.CLARITY_EAP EAP
	ON OP.PROC_ID = EAP.PROC_ID
WHERE 1 = 1
	AND OP.ORDER_TYPE_C != 999
	AND OP.ORDER_STATUS_C NOT IN (4,7) -- Canceled, Denied Approval
	AND OPF.ORDER_PROC_ID IS NULL
	--AND RES.ORD_VALUE IS NOT NULL
	AND EAP.PROC_CODE = 'LAB3415' -- urine drug screen specific for ED-ALT RTRT project purposes
ORDER BY ORDER_PROC_ID

CREATE INDEX ORDER_PROC_ID ON #ORDER_PROC_NOT_FINALIZED(ORDER_PROC_ID)


-- Final SAMHSA Labs table

IF OBJECT_ID ('dbo.SAMHSA_GRANT_REPORTING_LABS', 'U') IS NOT NULL DROP TABLE dbo.SAMHSA_GRANT_REPORTING_LABS

SELECT DISTINCT SAMHSA_ENC.PAT_ID
		, OP.PAT_ENC_CSN_ID
		, OP.ORDER_PROC_ID
		, OP.ORDER_INST
		, EAP.PROC_CODE
		, COALESCE(OP.DISPLAY_NAME, OP.[DESCRIPTION]) AS ORDER_DESCRIPTION
		, OP.REFERRING_PROV_ID
		, OP.AUTHRZING_PROV_ID
		, OM.NAME AS ORDERING_MODE_NM
		, LNCDB1.LNC_CODE AS PROC_LOINC_CODE
		, LNCDB1.LNC_FULL_NAM AS PROC_LOINC_NM
		, LNCDB2.LNC_CODE AS COMPONENT_LOINC_CD
		, LNCDB2.LNC_FULL_NAM AS COMPONENT_LOINC_NM
		, RES.COMPONENT_ID
		, CC.NAME AS COMPONENT_NM
		, RES.LINE AS RES_LINE
		, ORD2.SPECIMN_TAKEN_TIME	
		, RES.RESULT_TIME
		, RES.ORD_VALUE
		, RES.COMPONENT_COMMENT
		, CAST(OPICD9.OPDX_ICD9_LIST AS VARCHAR(2000)) AS OPDX_ICD9_LIST -- forcing field format to avoid NTEXT and allow export
		, CAST(OPICD10.OPDX_ICD10_LIST AS VARCHAR(2000)) AS OPDX_ICD10_LIST
		--, RES.RESULT_STATUS_C
		--, RES.LAB_STATUS_C
		, RS.NAME AS RESULT_STATUS_NM
		, LS.NAME AS LAB_STATUS_NM
INTO dbo.SAMHSA_GRANT_REPORTING_LABS
FROM CLARITY.dbo.ORDER_PROC OP
INNER JOIN #ORDER_PROC_FINALIZED OPF
	ON OP.ORDER_PROC_ID = OPF.ORDER_PROC_ID
INNER JOIN dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS SAMHSA_ENC
	ON OP.PAT_ENC_CSN_ID = SAMHSA_ENC.PAT_ENC_CSN_ID
LEFT JOIN CLARITY.dbo.ORDER_PROC_3 OP3
	ON OP.ORDER_PROC_ID = OP3.ORDER_ID
LEFT JOIN CLARITY.dbo.ZC_ORDERING_MODE OM
	ON OP3.ORDERING_MODE_C = OM.ORDERING_MODE_C
LEFT JOIN CLARITY.dbo.ORDER_RESULTS RES
	ON OP.ORDER_PROC_ID = RES.ORDER_PROC_ID
LEFT JOIN CLARITY.dbo.CLARITY_COMPONENT CC
	ON RES.COMPONENT_ID = CC.COMPONENT_ID
LEFT JOIN #ORDER_PROC_ICD9_STUFF OPICD9
	ON OP.ORDER_PROC_ID = OPICD9.ORDER_PROC_ID
LEFT JOIN #ORDER_PROC_ICD10_STUFF OPICD10
	ON OP.ORDER_PROC_ID = OPICD10.ORDER_PROC_ID
LEFT JOIN CLARITY.dbo.ZC_RESULT_FLAG RF
	ON RES.RESULT_FLAG_C = RF.RESULT_FLAG_C
LEFT JOIN CLARITY.dbo.CLARITY_EAP EAP
	ON OP.PROC_ID = EAP.PROC_ID
LEFT JOIN CLARITY.dbo.ORDER_PROC_4 OP4 -- for LOINC codes
	ON OP.ORDER_PROC_ID = OP4.ORDER_ID
LEFT JOIN CLARITY.dbo.LNC_DB_MAIN LNCDB1
	ON OP4.PROC_LNC_ID = LNCDB1.RECORD_ID
LEFT JOIN CLARITY.dbo.LNC_DB_MAIN LNCDB2
	ON RES.COMPON_LNC_ID = LNCDB2.RECORD_ID
LEFT JOIN CLARITY.dbo.ORDER_PROC_2 ORD2
	ON OP.ORDER_PROC_ID = ORD2.ORDER_PROC_ID
LEFT JOIN CLARITY.dbo.ZC_RESULT_STATUS RS
	ON RES.RESULT_STATUS_C = RS.RESULT_STATUS_C
LEFT JOIN CLARITY.dbo.ZC_LAB_STATUS LS
	ON RES.LAB_STATUS_C = LS.LAB_STATUS_C
--WHERE 1 = 1
--	AND OP.ORDER_TYPE_C != 999
--	--AND RES.RESULT_STATUS_C IN (3,4) -- Final, Corrected
--	--AND RES.LAB_STATUS_C IN (3,4,5) -- Final Results, Edited, Edited Result - FINAL
--	AND OP.ORDER_STATUS_C NOT IN (4,7) -- Canceled, Denied Approval
ORDER BY SAMHSA_ENC.PAT_ID
		, OP.PAT_ENC_CSN_ID
		, OP.ORDER_PROC_ID


-- Inserting labs approved but not yet complete - includes some whose statuses will change later

INSERT INTO dbo.SAMHSA_GRANT_REPORTING_LABS
(
	PAT_ID
		, PAT_ENC_CSN_ID
		, ORDER_PROC_ID
		, ORDER_INST
		, PROC_CODE
		, ORDER_DESCRIPTION
		, REFERRING_PROV_ID
		, AUTHRZING_PROV_ID
		, ORDERING_MODE_NM
		, PROC_LOINC_CODE
		, PROC_LOINC_NM
		, COMPONENT_LOINC_CD
		, COMPONENT_LOINC_NM
		, COMPONENT_ID
		, COMPONENT_NM
		, RES_LINE
		, SPECIMN_TAKEN_TIME	
		, RESULT_TIME
		, ORD_VALUE
		, COMPONENT_COMMENT
		, OPDX_ICD9_LIST 
		, OPDX_ICD10_LIST
		, RESULT_STATUS_NM
		, LAB_STATUS_NM
)
SELECT DISTINCT PAT_ID
		, PAT_ENC_CSN_ID
		, ORDER_PROC_ID
		, ORDER_INST
		, PROC_CODE
		, ORDER_DESCRIPTION
		, REFERRING_PROV_ID
		, AUTHRZING_PROV_ID
		, ORDERING_MODE_NM
		, PROC_LOINC_CODE
		, PROC_LOINC_NM
		, COMPONENT_LOINC_CD
		, COMPONENT_LOINC_NM
		, COMPONENT_ID
		, COMPONENT_NM
		, RES_LINE
		, SPECIMN_TAKEN_TIME	
		, RESULT_TIME
		, ORD_VALUE
		, COMPONENT_COMMENT
		, OPDX_ICD9_LIST 
		, OPDX_ICD10_LIST
		, RESULT_STATUS_NM
		, LAB_STATUS_NM
FROM
(
SELECT SAMHSA_ENC.PAT_ID
		, OP.PAT_ENC_CSN_ID
		, OP.ORDER_PROC_ID
		, OP.ORDER_INST
		, EAP.PROC_CODE
		, RANK() OVER (PARTITION BY OP.ORDER_PROC_ID,RES.COMPONENT_ID ORDER BY ORDER_INST DESC) AS DSC_RNK -- combination of ORDER_PROC_ID and COMPONENT_ID needed for unique record. With just ORDER_PROC_ID, the last documented among different components would be selected
		, COALESCE(OP.DISPLAY_NAME, OP.[DESCRIPTION]) AS ORDER_DESCRIPTION
		, OP.REFERRING_PROV_ID
		, OP.AUTHRZING_PROV_ID
		, OM.NAME AS ORDERING_MODE_NM
		, LNCDB1.LNC_CODE AS PROC_LOINC_CODE
		, LNCDB1.LNC_FULL_NAM AS PROC_LOINC_NM
		, LNCDB2.LNC_CODE AS COMPONENT_LOINC_CD
		, LNCDB2.LNC_FULL_NAM AS COMPONENT_LOINC_NM
		, RES.COMPONENT_ID
		, CC.NAME AS COMPONENT_NM
		, RES.LINE AS RES_LINE
		, ORD2.SPECIMN_TAKEN_TIME	
		, RES.RESULT_TIME
		, RES.ORD_VALUE
		, RES.COMPONENT_COMMENT
		, CAST(OPICD9.OPDX_ICD9_LIST AS VARCHAR(2000)) AS OPDX_ICD9_LIST -- forcing field format to avoid NTEXT and allow export
		, CAST(OPICD10.OPDX_ICD10_LIST AS VARCHAR(2000)) AS OPDX_ICD10_LIST
		, RS.NAME AS RESULT_STATUS_NM
		, LS.NAME AS LAB_STATUS_NM
FROM CLARITY.dbo.ORDER_PROC OP
INNER JOIN #ORDER_PROC_NOT_FINALIZED OPNF
	ON OP.ORDER_PROC_ID = OPNF.ORDER_PROC_ID
INNER JOIN dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS SAMHSA_ENC
	ON OP.PAT_ENC_CSN_ID = SAMHSA_ENC.PAT_ENC_CSN_ID
LEFT JOIN CLARITY.dbo.ORDER_PROC_3 OP3
	ON OP.ORDER_PROC_ID = OP3.ORDER_ID
LEFT JOIN CLARITY.dbo.ZC_ORDERING_MODE OM
	ON OP3.ORDERING_MODE_C = OM.ORDERING_MODE_C
LEFT JOIN CLARITY.dbo.ORDER_RESULTS RES
	ON OP.ORDER_PROC_ID = RES.ORDER_PROC_ID
LEFT JOIN CLARITY.dbo.CLARITY_COMPONENT CC
	ON RES.COMPONENT_ID = CC.COMPONENT_ID
LEFT JOIN #ORDER_PROC_ICD9_STUFF OPICD9
	ON OP.ORDER_PROC_ID = OPICD9.ORDER_PROC_ID
LEFT JOIN #ORDER_PROC_ICD10_STUFF OPICD10
	ON OP.ORDER_PROC_ID = OPICD10.ORDER_PROC_ID
LEFT JOIN CLARITY.dbo.ZC_RESULT_FLAG RF
	ON RES.RESULT_FLAG_C = RF.RESULT_FLAG_C
LEFT JOIN CLARITY.dbo.CLARITY_EAP EAP
	ON OP.PROC_ID = EAP.PROC_ID
LEFT JOIN CLARITY.dbo.ORDER_PROC_4 OP4 -- for LOINC codes
	ON OP.ORDER_PROC_ID = OP4.ORDER_ID
LEFT JOIN CLARITY.dbo.LNC_DB_MAIN LNCDB1
	ON OP4.PROC_LNC_ID = LNCDB1.RECORD_ID
LEFT JOIN CLARITY.dbo.LNC_DB_MAIN LNCDB2
	ON RES.COMPON_LNC_ID = LNCDB2.RECORD_ID
LEFT JOIN CLARITY.dbo.ORDER_PROC_2 ORD2
	ON OP.ORDER_PROC_ID = ORD2.ORDER_PROC_ID
LEFT JOIN CLARITY.dbo.ZC_RESULT_STATUS RS
	ON RES.RESULT_STATUS_C = RS.RESULT_STATUS_C
LEFT JOIN CLARITY.dbo.ZC_LAB_STATUS LS
	ON RES.LAB_STATUS_C = LS.LAB_STATUS_C
--WHERE 1 = 1
--	AND OP.ORDER_TYPE_C != 999
--	--AND RES.RESULT_STATUS_C IN (3,4) -- Final, Corrected
--	--AND RES.LAB_STATUS_C IN (3,4,5) -- Final Results, Edited, Edited Result - FINAL
	--AND OP.ORDER_STATUS_C NOT IN (4,7) -- Canceled, Denied Approval
--ORDER BY SAMHSA_PAT.PAT_ID
--		, OP.PAT_ENC_CSN_ID
--		, OP.ORDER_PROC_ID
) AS TEMP
WHERE DSC_RNK = 1


-- Lab results comment data

IF OBJECT_ID ('dbo.SAMHSA_GRANT_REPORTING_LABS_COMMENTS', 'U') IS NOT NULL DROP TABLE dbo.SAMHSA_GRANT_REPORTING_LABS_COMMENTS

SELECT *
INTO dbo.SAMHSA_GRANT_REPORTING_LABS_COMMENTS
FROM
(
	SELECT SAMHSA_LABS.PAT_ID 
			, SAMHSA_LABS.PAT_ENC_CSN_ID
			, SAMHSA_LABS.ORDER_PROC_ID
			, SAMHSA_LABS.ORDER_INST
			, SAMHSA_LABS.COMPONENT_ID
			, SAMHSA_LABS.COMPONENT_NM
			, ORD2.SPECIMN_TAKEN_TIME
			, SAMHSA_LABS.RESULT_TIME
			, CMT.LINE
			, CMT.LINE_COMMENT
			, CMT.RESULTS_CMT
	FROM dbo.SAMHSA_GRANT_REPORTING_LABS SAMHSA_LABS
	LEFT JOIN CLARITY.dbo.ORDER_RES_COMMENT CMT
		ON SAMHSA_LABS.ORDER_PROC_ID = CMT.ORDER_ID
		AND SAMHSA_LABS.COMPONENT_ID = CMT.COMPONENT_ID
		AND SAMHSA_LABS.RES_LINE = CMT.LINE
	LEFT JOIN CLARITY.dbo.ORDER_PROC_2 ORD2
		ON SAMHSA_LABS.ORDER_PROC_ID = ORD2.ORDER_PROC_ID
	WHERE 1 = 1
			AND CMT.LINE IS NOT NULL

	UNION

	SELECT SAMHSA_LABS.PAT_ID 
			, SAMHSA_LABS.PAT_ENC_CSN_ID
			, SAMHSA_LABS.ORDER_PROC_ID
			, SAMHSA_LABS.ORDER_INST
			, SAMHSA_LABS.COMPONENT_ID
			, SAMHSA_LABS.COMPONENT_NM
			, ORD2.SPECIMN_TAKEN_TIME
			, SAMHSA_LABS.RESULT_TIME
			, CCMT.LINE_COMP AS LINE
			, CCMT.LINE_COMMENT
			, CCMT.RESULTS_COMP_CMT AS RESULTS_CMT
	FROM dbo.SAMHSA_GRANT_REPORTING_LABS SAMHSA_LABS
	LEFT JOIN CLARITY.dbo.ORDER_RES_COMP_CMT CCMT
		ON SAMHSA_LABS.ORDER_PROC_ID = CCMT.ORDER_ID
		AND SAMHSA_LABS.COMPONENT_ID = CCMT.COMPONENT_ID
		AND SAMHSA_LABS.RES_LINE = CCMT.LINE_COMP
	LEFT JOIN CLARITY.dbo.ORDER_PROC_2 ORD2
		ON SAMHSA_LABS.ORDER_PROC_ID = ORD2.ORDER_PROC_ID
	WHERE 1 = 1
			AND CCMT.LINE_COMP IS NOT NULL
) AS TEMP
ORDER BY PAT_ID
		, PAT_ENC_CSN_ID
		, ORDER_PROC_ID
		, COMPONENT_ID
		, COMPONENT_NM
		, RESULT_TIME
		, LINE
		, LINE_COMMENT


-- Procedure orders

-- Listing all orders that are not already in the labs extract, and limiting to
-- any ordered through the Multimodal Pain Management order set or that are on the list
-- of opioid alternative procedures identified with the ED data analysts' method.

IF OBJECT_ID('TEMPDB..#SAMHSA_LABS_CODES', 'U') IS NOT NULL DROP TABLE #SAMHSA_LABS_CODES

SELECT ORDER_PROC_ID
INTO #SAMHSA_LABS_CODES
FROM dbo.SAMHSA_GRANT_REPORTING_LABS
ORDER BY ORDER_PROC_ID

CREATE INDEX PROC_CODE ON #SAMHSA_LABS_CODES(ORDER_PROC_ID)


-- Listing Multimodal Pain Management order set procedure items

IF OBJECT_ID('TEMPDB..#MULTIMODAL_PROC_ORDER_SETS', 'U') IS NOT NULL DROP TABLE #MULTIMODAL_PROC_ORDER_SETS

SELECT ORD_MET.PAT_ENC_CSN_ID, ORD_MET.ORDER_ID, PROTOCOL_ID, PROTOCOL_NAME, ORD_MET.PRL_ORDERSET_ID
		, EAP.PROC_ID, EAP.PROC_CODE, EAP.ORDER_DISPLAY_NAME
INTO #MULTIMODAL_PROC_ORDER_SETS
FROM CLARITY.dbo.CL_PRL_SS PRL
INNER JOIN CLARITY.dbo.ORDER_METRICS ORD_MET
	ON PRL.PROTOCOL_ID = ORD_MET.PRL_ORDERSET_ID
INNER JOIN dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS SAMHSA
	ON ORD_MET.PAT_ENC_CSN_ID = SAMHSA.PAT_ENC_CSN_ID
INNER JOIN CLARITY.dbo.ORDER_PROC OP
	ON ORD_MET.ORDER_ID = OP.ORDER_PROC_ID -- ORDER_METRICS has medications and procedures, this limits results to procedures
--LEFT JOIN CLARITY.dbo.ORDER_MED OM
--	ON ORD_MET.ORDER_ID = OM.ORDER_MED_ID
LEFT JOIN CLARITY.dbo.CLARITY_EAP EAP
	ON OP.PROC_ID = EAP.PROC_ID
--LEFT JOIN CLARITY.dbo.CLARITY_MEDICATION MED
--	ON OM.MEDICATION_ID = MED.MEDICATION_ID
WHERE 1 = 1
	AND ORD_MET.PRL_ORDERSET_ID IN (304002285,40810000) --ed/IP multimodal orderset
ORDER BY ORD_MET.ORDER_ID

CREATE INDEX PROC_ORDER_ID ON #MULTIMODAL_PROC_ORDER_SETS(ORDER_ID)


-- Listing additional opioid alternative procedure orders using identification method
-- from JPS ED data analysts

IF OBJECT_ID('TEMPDB..#OPIOID_ALTERNATIVE_PROC_ORDERS', 'U') IS NOT NULL DROP TABLE #OPIOID_ALTERNATIVE_PROC_ORDERS

SELECT OP.PAT_ENC_CSN_ID, OP.ORDER_PROC_ID, EAP.PROC_ID, EAP.PROC_CODE, NAME, ORDER_DISPLAY_NAME
INTO #OPIOID_ALTERNATIVE_PROC_ORDERS
FROM CLARITY.dbo.CLARITY_EAP EAP
INNER JOIN CLARITY.dbo.ORDER_PROC OP
	ON EAP.PROC_ID = OP.PROC_ID
INNER JOIN dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS SAMHSA
	ON OP.PAT_ENC_CSN_ID = SAMHSA.PAT_ENC_CSN_ID
WHERE 1 = 1
	AND (
			EAP.PROC_CODE IN ('PRO201','PRO155','PRO202') --nerve block procedures
			OR
			EAP.PROC_NAME LIKE '%SPLINT%'
			OR
			EAP.PROC_CODE IN ('NUR545','NUR299','NUR261','NUR302') -- Heat or ice application to affected area
		)
	AND OP.PAT_ENC_CSN_ID IS NOT NULL
	AND (OP.ORDER_STATUS_C <> 4 OR OP.ORDER_STATUS_C IS NULL)
	AND OP.ORDER_INST IS NOT NULL
	--AND OP.FUTURE_OR_STAND IS NULL -- No parent orders, only normal and child orders
ORDER BY OP.PAT_ENC_CSN_ID, OP.ORDER_PROC_ID


IF OBJECT_ID('TEMPDB..#INCLUSION_PROC_ORDERS', 'U') IS NOT NULL DROP TABLE #INCLUSION_PROC_ORDERS

SELECT DISTINCT PAT_ENC_CSN_ID, ORDER_PROC_ID
INTO #INCLUSION_PROC_ORDERS
FROM
(
	SELECT PAT_ENC_CSN_ID, ORDER_ID AS ORDER_PROC_ID FROM #MULTIMODAL_PROC_ORDER_SETS
	UNION
	SELECT PAT_ENC_CSN_ID, ORDER_PROC_ID FROM #OPIOID_ALTERNATIVE_PROC_ORDERS
) AS TEMP
ORDER BY PAT_ENC_CSN_ID, ORDER_PROC_ID



-- Creating final table for procedure orders

IF OBJECT_ID('dbo.SAMHSA_GRANT_REPORTING_PROCEDURE_ORDERS', 'U') IS NOT NULL DROP TABLE dbo.SAMHSA_GRANT_REPORTING_PROCEDURE_ORDERS

SELECT P.PAT_ID
	, OP.PAT_ENC_CSN_ID
	, OP.ORDER_PROC_ID
	, OP.ORDER_INST
	, OP.INSTANTIATED_TIME
	, EAP.PROC_CODE
	, EAP.PROC_NAME 
	, OP.DESCRIPTION
	, CASE WHEN (MLT.ORDER_ID IS NOT NULL AND MLT.PRL_ORDERSET_ID = '304002285') THEN 1 ELSE 0 END AS MULTIMODAL_ED_FLAG
	, CASE WHEN (MLT.ORDER_ID IS NOT NULL AND MLT.PRL_ORDERSET_ID = '40810000') THEN 1 ELSE 0 END AS MULTIMODAL_IP_FLAG
	, ST.NAME AS ORDER_STATUS_NM
	, OP.AUTHRZING_PROV_ID
	, SER.PROV_NAME AS AUTHRZING_PROV_NM
	--, RES.LINE
	--, CC.NAME
	--, CASE WHEN ORD_VALUE LIKE 'See%F%' THEN RES.COMPONENT_COMMENT ELSE RES.ORD_VALUE END AS RESULT
INTO dbo.SAMHSA_GRANT_REPORTING_PROCEDURE_ORDERS
FROM
	CLARITY.DBO.ORDER_PROC OP 
	INNER JOIN dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS SMH_ENC	ON OP.PAT_ENC_CSN_ID = SMH_ENC.PAT_ENC_CSN_ID
	INNER JOIN #INCLUSION_PROC_ORDERS IPO						ON OP.PAT_ENC_CSN_ID = IPO.PAT_ENC_CSN_ID AND OP.ORDER_PROC_ID = IPO.ORDER_PROC_ID
	LEFT JOIN CLARITY.DBO.ORDER_PROC_2 OP2						ON OP.ORDER_PROC_ID = OP2.ORDER_PROC_ID
	LEFT JOIN CLARITY.dbo.ORDER_INSTANTIATED OI					ON OP.ORDER_PROC_ID = OI.ORDER_ID
	LEFT JOIN CLARITY.dbo.CLARITY_EAP EAP						ON OP.PROC_ID = EAP.PROC_ID
	LEFT JOIN CLARITY.dbo.PATIENT P								ON OP.PAT_ID = P.PAT_ID
	LEFT JOIN CLARITY.dbo.ZC_ORDER_STATUS ST					ON OP.ORDER_STATUS_C = ST.ORDER_STATUS_C
	LEFT JOIN #SAMHSA_LABS_CODES SMH_LAB						ON OP.ORDER_PROC_ID = SMH_LAB.ORDER_PROC_ID
	LEFT JOIN CLARITY.dbo.CLARITY_SER SER						ON OP.AUTHRZING_PROV_ID = SER.PROV_ID
	LEFT JOIN #MULTIMODAL_PROC_ORDER_SETS MLT					ON OP.PAT_ENC_CSN_ID = MLT.PAT_ENC_CSN_ID AND OP.ORDER_PROC_ID = MLT.ORDER_ID
	LEFT JOIN #OPIOID_ALTERNATIVE_PROC_ORDERS OPD_ALT			ON OP.PAT_ENC_CSN_ID = OPD_ALT.PAT_ENC_CSN_ID AND OP.ORDER_PROC_ID = OPD_ALT.ORDER_PROC_ID
WHERE 1=1
	AND OP.PAT_ENC_CSN_ID IS NOT NULL
	AND (OP.ORDER_STATUS_C <> 4 OR OP.ORDER_STATUS_C IS NULL)
	--AND OP.FUTURE_OR_STAND IS NULL -- No parent orders, only normal and child orders
	AND OP.ORDER_INST IS NOT NULL
	AND SMH_LAB.ORDER_PROC_ID IS NULL
	--AND (
	--		MLT.ORDER_ID IS NOT NULL OR OPD_ALT.PROC_ID IS NOT NULL
	--	)
ORDER BY OP.PAT_ID, OP.PAT_ENC_CSN_ID, OP.ORDER_PROC_ID


---- Check queries

---- Checking for duplicate patients in patient temp table

-- Checking for encounters with provider notes referencing trigger point therapy

---- Only 161 records across all of Epic time

--SELECT DISTINCT 
--	HNO.PAT_ENC_CSN_ID
--FROM CLARITY.dbo.HNO_INFO as HNO
----INNER JOIN #PAIN_ENC_LIST_STAGING STG
----	ON HNO.PAT_ENC_CSN_ID = STG.PAT_ENC_CSN_ID
--INNER JOIN CLARITY.dbo.NOTE_SMARTPHRASE_IDS as NSP
--	ON HNO.NOTE_ID = NSP.NOTE_ID
--INNER JOIN CLARITY.dbo.CL_SPHR as HH1
--	ON HH1.SMARTPHRASE_ID = NSP.SMARTPHRASES_ID
--	AND HH1.SMARTPHRASE_NAME LIKE '%PROCTRIGGERPOINT%' --trigger point dotphrase
--WHERE 1 = 1
--	--AND HNO.ENTRY_DATETIME >= '01/01/2020'
--	--AND HNO.ENTRY_DATETIME < '04/01/2021'


-- Diagnosis count list

--SELECT EDG.DX_ID, EDG.CURRENT_ICD10_LIST, EDG.DX_NAME, GCDX.PAIN_TYPE, COUNT(DX.DX_ID) AS DX_COUNT
--FROM #PAIN_ENC_LIST_STAGING STG
--INNER JOIN CLARITY.dbo.PAT_ENC_DX DX
--	ON STG.PAT_ENC_CSN_ID = DX.PAT_ENC_CSN_ID
--INNER JOIN dbo.SAMHSA_DX_LIST_G_CROSS GCDX
--	ON DX.DX_ID = GCDX.DX_ID
--LEFT JOIN CLARITY.dbo.CLARITY_EDG EDG
--	ON DX.DX_ID = EDG.DX_ID
--GROUP BY EDG.DX_ID, EDG.CURRENT_ICD10_LIST, EDG.DX_NAME, GCDX.PAIN_TYPE
--ORDER BY DX_COUNT DESC


--SELECT *
--FROM dbo.SAMHSA_DX_LIST_G_CROSS
--WHERE 1 = 1
--	--AND DX_NAME LIKE '%COVID%'
--	AND DX_ID = '128670'



--SELECT PAT_ID, COUNT(PAT_ID) AS PAT_COUNT
--FROM #PAT_LIST
--GROUP BY PAT_ID
--HAVING COUNT(PAT_ID) >= 2


---- Listing patients identified with ORT high scores or research study IDs
---- who didn't also have ED-Opioid ICD codes or med orders

--SELECT *
--FROM dbo.SAMHSA_GRANT_REPORTING_PATIENTS
--WHERE ID_CRITERIA IN ('ORT FLOWSHEET','RESEARCH STUDY RECORDS')
--ORDER BY PAT_ID


---- Random validation set

--SELECT TOP 25 *
--FROM dbo.SAMHSA_GRANT_REPORTING_PATIENTS
--ORDER BY NEWID()



--SELECT ENC_DX.DX_ID, EDG.DX_NAME, EDG.CURRENT_ICD9_LIST, EDG.CURRENT_ICD10_LIST
--FROM CLARITY.dbo.PAT_ENC_DX ENC_DX
--LEFT JOIN CLARITY.dbo.CLARITY_EDG EDG
--	ON ENC_DX.DX_ID = EDG.DX_ID
--WHERE ENC_DX.PAT_ENC_CSN_ID = '86752147'


---- Checking the one research study patients

--SELECT PAT.PAT_ID, PAT_MRN_ID, PAT3.IS_TEST_PAT_YN, VPAT.IS_VALID_PAT_YN 
--FROM CLARITY.dbo.PATIENT PAT
--LEFT JOIN CLARITY.dbo.PATIENT_3 PAT3
--	ON PAT.PAT_ID = PAT3.PAT_ID
--LEFT JOIN CLARITY.dbo.VALID_PATIENT VPAT
--	ON PAT.PAT_ID = VPAT.PAT_ID
--WHERE PAT.PAT_ID = 'Z2092158'


---- Checking opioid med orders in the data


--SELECT * FROM #SBST_ABS_OPIOID_ENC_LIST_STAGING WHERE PAT_ID = 'Z75958'

--SELECT OM.ORDER_MED_ID
--		, OM.ORDER_INST
--		, CM.NAME
--FROM CLARITY.dbo.ORDER_MED OM
--LEFT JOIN CLARITY.dbo.CLARITY_MEDICATION CM
--	ON OM.MEDICATION_ID = CM.MEDICATION_ID
--INNER JOIN #OPIOID_MED_LIST OPDM
--	ON CM.MEDICATION_ID = OPDM.MEDICATION_ID
--WHERE 1 = 1
--	AND OM.PAT_ID = 'Z75958'
--	AND OM.ORDER_STATUS_C IN (2,5,9,11) -- Sent, Completed, Discontinued, Dispensed
--ORDER BY OM.ORDER_INST



---- Record counts for extracts

--SELECT COUNT(*) AS SAMHSA_PATS FROM dbo.SAMHSA_GRANT_REPORTING_PATIENTS

--SELECT COUNT(*) AS SAMHSA_DX_LIST FROM dbo.SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST

--SELECT COUNT(*) AS SAMHSA_ENCS FROM dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS

--SELECT COUNT(*) AS SAMHSA_MEDS FROM dbo.SAMHSA_GRANT_REPORTING_MEDICATIONS

--SELECT COUNT(*) AS SAMHSA_RFLS FROM dbo.SAMHSA_GRANT_REPORTING_REFERRALS

--SELECT COUNT(*) AS SAMHSA_ORT_SCORE FROM dbo.SAMHSA_GRANT_REPORTING_ORT_SCORES

--SELECT COUNT(*) AS SAMHSA_LAB_RECORDS FROM dbo.SAMHSA_GRANT_REPORTING_LABS

--SELECT COUNT(DISTINCT ORDER_PROC_ID) AS SAMHSA_LAB_ORDERS FROM dbo.SAMHSA_GRANT_REPORTING_LABS

--SELECT COUNT(DISTINCT PAT_ENC_CSN_ID) AS SAMHSA_LAB_ENCS FROM dbo.SAMHSA_GRANT_REPORTING_LABS

--SELECT COUNT(*) AS LAB_CMT_RECORDS FROM dbo.SAMHSA_GRANT_REPORTING_LABS_COMMENTS


--SELECT COUNT(DISTINCT ORDER_PROC_ID) AS HIV_LAB_ORDERS FROM dbo.HIV_LABS

--SELECT COUNT(DISTINCT PAT_ENC_CSN_ID) AS HIV_LAB_ENCS FROM dbo.HIV_LABS


--SELECT COUNT(DISTINCT ORDER_PROC_ID) AS HCV_LAB_ORDERS FROM dbo.HCV_LABS

--SELECT COUNT(DISTINCT PAT_ENC_CSN_ID) AS HCV_LAB_ENCS FROM dbo.HCV_LABS


--SELECT COUNT(DISTINCT ORDER_PROC_ID) AS CNC_LAB_ORDERS FROM dbo.CANCER_SURVIVORSHIP_LABS

--SELECT COUNT(DISTINCT PAT_ENC_CSN_ID) AS CNC_LAB_ENCS FROM dbo.CANCER_SURVIVORSHIP_LABS


---- Checking for labs records duplications

--SELECT PAT_ID, PAT_ENC_CSN_ID, ORDER_PROC_ID, COMPONENT_ID, ORD_VALUE, RESULT_TIME, COUNT(COMPONENT_ID) AS COMPONENT_COUNT
--FROM dbo.SAMHSA_GRANT_REPORTING_LABS
--GROUP BY PAT_ID, PAT_ENC_CSN_ID, ORDER_PROC_ID, COMPONENT_ID, ORD_VALUE, RESULT_TIME
--HAVING COUNT(COMPONENT_ID) >= 2

--SELECT * FROM dbo.SAMHSA_GRANT_REPORTING_LABS
--WHERE PAT_ENC_CSN_ID = '85913412'
--		AND ORDER_PROC_ID = '133902306'
--ORDER BY PAT_ID, PAT_ENC_CSN_ID, ORDER_PROC_ID, COMPONENT_ID, ORD_VALUE, RESULT_TIME


---- Checking order statuses on procedure orders table

--SELECT ORDER_STATUS_NM, COUNT(ORDER_PROC_ID) AS ORD_COUNT
--FROM dbo.SAMHSA_GRANT_REPORTING_PROCEDURE_ORDERS
--GROUP BY ORDER_STATUS_NM


---- Random 25 records from procedure order table for validation


--SELECT TOP 25 *
--FROM dbo.SAMHSA_GRANT_REPORTING_PROCEDURE_ORDERS
--ORDER BY NEWID()

---- Table backups

--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST_2021_04_29 FROM dbo.SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_ENCOUNTERS_2021_04_29 FROM dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_LABS_2021_04_29 FROM dbo.SAMHSA_GRANT_REPORTING_LABS
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_LABS_COMMENTS_2021_04_29 FROM dbo.SAMHSA_GRANT_REPORTING_LABS_COMMENTS
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_MEDICATIONS_2021_04_29 FROM dbo.SAMHSA_GRANT_REPORTING_MEDICATIONS
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_MULTIMODAL_ED_2021_04_29 FROM dbo.SAMHSA_GRANT_REPORTING_MULTIMODAL_ED
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_ORT_SCORES_2021_04_29 FROM dbo.SAMHSA_GRANT_REPORTING_ORT_SCORES
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_PATIENTS_2021_04_29 FROM dbo.SAMHSA_GRANT_REPORTING_PATIENTS
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_PROCEDURE_ORDERS_2021_04_29 FROM dbo.SAMHSA_GRANT_REPORTING_PROCEDURE_ORDERS
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_PROCEDURES_2021_04_29 FROM dbo.SAMHSA_GRANT_REPORTING_PROCEDURES
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_REFERRALS_2021_04_29 FROM dbo.SAMHSA_GRANT_REPORTING_REFERRALS
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_ALL_ED_ENCOUNTERS_2021_04_29 FROM dbo.SAMHSA_GRANT_REPORTING_ALL_ED_ENCOUNTERS
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST_ALL_ED_2021_04_29 FROM dbo.SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST_ALL_ED

--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST_2021_09_06 FROM dbo.SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_ENCOUNTERS_2021_09_06 FROM dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_LABS_2021_09_06 FROM dbo.SAMHSA_GRANT_REPORTING_LABS
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_LABS_COMMENTS_2021_09_06 FROM dbo.SAMHSA_GRANT_REPORTING_LABS_COMMENTS
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_MEDICATIONS_2021_09_06 FROM dbo.SAMHSA_GRANT_REPORTING_MEDICATIONS
----SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_MULTIMODAL_ED_2021_09_06 FROM dbo.SAMHSA_GRANT_REPORTING_MULTIMODAL_ED
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_ORT_SCORES_2021_09_06 FROM dbo.SAMHSA_GRANT_REPORTING_ORT_SCORES
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_PATIENTS_2021_09_06 FROM dbo.SAMHSA_GRANT_REPORTING_PATIENTS
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_PROCEDURE_ORDERS_2021_09_06 FROM dbo.SAMHSA_GRANT_REPORTING_PROCEDURE_ORDERS
--SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_PROCEDURES_2021_09_06 FROM dbo.SAMHSA_GRANT_REPORTING_PROCEDURES
----SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_REFERRALS_2021_09_06 FROM dbo.SAMHSA_GRANT_REPORTING_REFERRALS
----SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_ALL_ED_ENCOUNTERS_2021_09_06 FROM dbo.SAMHSA_GRANT_REPORTING_ALL_ED_ENCOUNTERS
----SELECT * INTO dbo.BK_SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST_ALL_ED_2021_09_06 FROM dbo.SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST_ALL_ED




---- File record counts

----SELECT COUNT(*) AS ALL_ED_ENCOUNTERS_COUNT FROM dbo.SAMHSA_GRANT_REPORTING_ALL_ED_ENCOUNTERS
--SELECT COUNT(*) AS DIAGNOSIS_LIST_COUNT FROM dbo.SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST
----SELECT COUNT(*) AS DIAGNOSIS_LIST_ALL_ED_COUNT FROM dbo.SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST_ALL_ED
--SELECT COUNT(*) AS ENCOUNTERS_COUNT FROM dbo.SAMHSA_GRANT_REPORTING_ENCOUNTERS
--SELECT COUNT(*) AS LABS_COUNT FROM dbo.SAMHSA_GRANT_REPORTING_LABS
--SELECT COUNT(*) AS LABS_COMMENTS_COUNT FROM dbo.SAMHSA_GRANT_REPORTING_LABS_COMMENTS
--SELECT COUNT(*) AS MEDICATIONS_COUNT FROM dbo.SAMHSA_GRANT_REPORTING_MEDICATIONS
----SELECT COUNT(*) AS MULTIMODAL_ED_COUNT FROM dbo.SAMHSA_GRANT_REPORTING_MULTIMODAL_ED
--SELECT COUNT(*) AS ORT_SCORES_COUNT FROM dbo.SAMHSA_GRANT_REPORTING_ORT_SCORES
--SELECT COUNT(*) AS PATIENTS_COUNT FROM dbo.SAMHSA_GRANT_REPORTING_PATIENTS
--SELECT COUNT(*) AS PROCEDURE_ORDERS_COUNT FROM dbo.SAMHSA_GRANT_REPORTING_PROCEDURE_ORDERS
--SELECT COUNT(*) AS PROCEDURES_COUNT FROM dbo.SAMHSA_GRANT_REPORTING_PROCEDURES
----SELECT COUNT(*) AS REFERRALS_COUNT FROM dbo.SAMHSA_GRANT_REPORTING_REFERRALS
----SELECT COUNT(*) AS ALL_ED_ENC_COUNT FROM dbo.SAMHSA_GRANT_REPORTING_ALL_ED_ENCOUNTERS
----SELECT COUNT(*) AS ALL_ED_DX_RECS FROM dbo.SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST_ALL_ED


---- Checking presence of Reason for Visit data in ED records

--SELECT COUNT(*)
--FROM dbo.SAMHSA_GRANT_REPORTING_ALL_ED_ENCOUNTERS
--WHERE 1 = 1
--	AND RSN_FOR_VISIT_LIST IS NOT NULL



-- Random all-ED listing for validation

--SELECT TOP 25 *
--FROM dbo.SAMHSA_GRANT_REPORTING_ALL_ED_ENCOUNTERS
--ORDER BY NEWID()




---- Random listing of records for validation

--SELECT TOP 25*
--FROM dbo.SAMHSA_GRANT_REPORTING_PROCEDURE_ORDERS
--ORDER BY NEWID()


--SELECT TOP 25*
--FROM dbo.SAMHSA_GRANT_REPORTING_MEDICATIONS
--ORDER BY NEWID()

--SELECT TOP 25*
--FROM dbo.SAMHSA_GRANT_REPORTING_DIAGNOSIS_LIST
--ORDER BY NEWID()


--SELECT PROC_ID, PROC_CODE FROM CLARITY.dbo.CLARITY_EAP WHERE PROC_CODE = '126096'

--SELECT * FROM dbo.SAMHSA_GRANT_REPORTING_PROCEDURE_ORDERS
--WHERE 1 = 1
--	AND (MULTIMODAL_ED_FLAG = 1 OR MULTIMODAL_IP_FLAG = 1)

--SELECT * FROM dbo.SAMHSA_GRANT_REPORTING_PROCEDURE_ORDERS
--WHERE MULTIMODAL_IP_FLAG = 1


-- Patient validation list, using Matt Cvitanovich method for pain dx identification

--SELECT TOP 25 *
--FROM dbo.SAMHSA_GRANT_REPORTING_PATIENTS
--ORDER BY NEWID()

